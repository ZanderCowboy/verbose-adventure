2023-08-30 12:12:18,571 - INFO	- <module> - Starting Engine...
2023-08-30 12:12:18,571 - DEBUG	- simulate_main - Calling simulate_main()...
2023-08-30 12:12:18,571 - INFO	- simulate_main - Statement:	(T v (P -> Q))
2023-08-30 12:12:18,571 - INFO	- simulate_main - Before proceeding, doing checks for unequal brackets and illegal characters.
2023-08-30 12:12:18,571 - DEBUG	- check_left_and_right_brackets - Calling check_left_and_right_brackets((T v (P -> Q)))...
2023-08-30 12:12:18,571 - INFO	- check_left_and_right_brackets - PASS: The number of left and right brackets are equal.
2023-08-30 12:12:18,571 - DEBUG	- check_for_illegal_characters - Calling check_for_illegal_characters((T v (P -> Q)))
2023-08-30 12:12:18,571 - DEBUG	- check_for_illegal_characters - ******************** starting input validation *******************
2023-08-30 12:12:18,571 - DEBUG	- validate_input - Calling validate_input(T)...
2023-08-30 12:12:18,572 - DEBUG	- validate_input - Checked against a regex. result(is it valid?)=True.
2023-08-30 12:12:18,572 - DEBUG	- validate_input - Calling validate_input(v)...
2023-08-30 12:12:18,572 - DEBUG	- validate_input - Checked against a regex. result(is it valid?)=True.
2023-08-30 12:12:18,572 - DEBUG	- validate_input - Calling validate_input(P)...
2023-08-30 12:12:18,572 - DEBUG	- validate_input - Checked against a regex. result(is it valid?)=True.
2023-08-30 12:12:18,572 - DEBUG	- validate_input - Calling validate_input(-)...
2023-08-30 12:12:18,572 - DEBUG	- validate_input - Checked against a regex. result(is it valid?)=True.
2023-08-30 12:12:18,572 - DEBUG	- validate_input - Calling validate_input(>)...
2023-08-30 12:12:18,572 - DEBUG	- validate_input - Checked against a regex. result(is it valid?)=True.
2023-08-30 12:12:18,572 - DEBUG	- validate_input - Calling validate_input(Q)...
2023-08-30 12:12:18,572 - DEBUG	- validate_input - Checked against a regex. result(is it valid?)=True.
2023-08-30 12:12:18,572 - DEBUG	- check_for_illegal_characters - ******************** finished input validation *******************
2023-08-30 12:12:18,572 - INFO	- check_for_illegal_characters - PASS: There were no illegal characters found.
2023-08-30 12:12:18,572 - INFO	- simulate_main - All checks are valid, proceeding with extracting information from statement.
2023-08-30 12:12:18,572 - INFO	- user_input - Processing statement...
2023-08-30 12:12:18,572 - DEBUG	- user_input - statement=(T v (P -> Q))
2023-08-30 12:12:18,573 - INFO	- analyze_statement - Starting to analyze statement...
2023-08-30 12:12:18,573 - INFO	- analyze_statement - The statement is sanitized from any whitespaces.
2023-08-30 12:12:18,573 - DEBUG	- analyze_statement - All whitespaces need to be removed, proceeding.
2023-08-30 12:12:18,573 - DEBUG	- clean_whitespaces - Calling clean_whitespaces((T v (P -> Q)))...
2023-08-30 12:12:18,573 - DEBUG	- clean_whitespaces - Finished removing whitespaces: statement=(Tv(P->Q))
2023-08-30 12:12:18,573 - DEBUG	- analyze_statement - Finished removing any whitespaces found in statement. Proceeding with finding variables.
2023-08-30 12:12:18,573 - INFO	- find_variables - Finding variables in statement...
2023-08-30 12:12:18,573 - DEBUG	- find_variables - statement=(Tv(P->Q))
2023-08-30 12:12:18,573 - DEBUG	- find_variables - variables_array=['T', 'P', 'Q']
2023-08-30 12:12:18,573 - INFO	- find_variables - Found all variables in statement.
2023-08-30 12:12:18,573 - INFO	- find_variables - *** Variables:	['T', 'P', 'Q'] ***
2023-08-30 12:12:18,573 - DEBUG	- analyze_statement - variables_arr=['T', 'P', 'Q']
2023-08-30 12:12:18,573 - INFO	- analyze_statement - The statement is converted to an array and any conditionals are sanitized.
2023-08-30 12:12:18,573 - DEBUG	- create_array_of_elements - Creating an array from a string...
2023-08-30 12:12:18,573 - DEBUG	- create_array_of_elements - Calling create_array_of_elements((Tv(P->Q)))
2023-08-30 12:12:18,573 - DEBUG	- create_array_of_elements - array_of_elements=['(', 'T', 'v', '(', 'P', '-', '>', 'Q', ')', ')']
2023-08-30 12:12:18,573 - DEBUG	- create_array_of_elements - Finished creating array.
2023-08-30 12:12:18,573 - DEBUG	- check_conditionals - Calling check_conditionals(['(', 'T', 'v', '(', 'P', '-', '>', 'Q', ')', ')'], ['T', 'P', 'Q'])...
2023-08-30 12:12:18,573 - INFO	- check_conditionals - PASS: Any conditional symbols present, are in the desired form.
2023-08-30 12:12:18,573 - DEBUG	- create_conditionals - Creating one-piece conditionals from single elements.
2023-08-30 12:12:18,574 - DEBUG	- create_conditionals - Searching for a '-' in array_of_elements=['(', 'T', 'v', '(', 'P', '-', '>', 'Q', ')', ')']
2023-08-30 12:12:18,574 - DEBUG	- create_conditionals - Conditional symbols were found in ['(', 'T', 'v', '(', 'P', '-', '>', 'Q', ')', ')']
2023-08-30 12:12:18,574 - DEBUG	- create_conditionals - array_of_elements=['(', 'T', 'v', '(', 'P', '->', 'Q', ')', ')']
2023-08-30 12:12:18,574 - DEBUG	- create_conditionals - Finished creating conditionals.
2023-08-30 12:12:18,574 - DEBUG	- analyze_statement - In analyze_statement(): 
len(variables_arr)=3, 
variables_arr=['T', 'P', 'Q'], 
array_of_elements=['(', 'T', 'v', '(', 'P', '->', 'Q', ')', ')']
2023-08-30 12:12:18,574 - DEBUG	- print_details - Printing details...
2023-08-30 12:12:18,574 - INFO	- print_details - ************************** ANALYSIS **************************
2023-08-30 12:12:18,574 - INFO	- print_details - -> Number of Variables: 	3
2023-08-30 12:12:18,574 - INFO	- print_details - -> Variables: 	['T', 'P', 'Q']
2023-08-30 12:12:18,574 - INFO	- print_details - -> Array of Elements: 	['(', 'T', 'v', '(', 'P', '->', 'Q', ')', ')']
2023-08-30 12:12:18,574 - INFO	- print_details - ************************** ANALYSIS **************************
2023-08-30 12:12:18,574 - INFO	- analyze_statement - Analyzing concluded.
2023-08-30 12:12:18,574 - INFO	- parse_array - Starting to parse array...
2023-08-30 12:12:18,574 - DEBUG	- remove_brackets_around_variables - Removing brackets around standalone variables...
2023-08-30 12:12:18,574 - DEBUG	- remove_brackets_around_variables - arr=['(', 'T', 'v', '(', 'P', '->', 'Q', ')', ')']
2023-08-30 12:12:18,574 - DEBUG	- remove_brackets_around_variables - Finished removing all brackets around variables.
2023-08-30 12:12:18,574 - DEBUG	- parse_array - In parse_array(): elements_second=['(', 'T', 'v', '(', 'P', '->', 'Q', ')', ')']
2023-08-30 12:12:18,574 - DEBUG	- add_brackets_around_unary_connectives - Adding brackets around unary connectives...
2023-08-30 12:12:18,574 - DEBUG	- add_brackets_around_unary_connectives - arr=['(', 'T', 'v', '(', 'P', '->', 'Q', ')', ')']
2023-08-30 12:12:18,574 - DEBUG	- add_brackets_around_unary_connectives - Finished adding brackets around all unary connectives.
2023-08-30 12:12:18,575 - DEBUG	- parse_array - In parse_array(): elements_second=['(', 'T', 'v', '(', 'P', '->', 'Q', ')', ')']
2023-08-30 12:12:18,575 - INFO	- parse_array - Final checks are ran before parsing concludes.
2023-08-30 12:12:18,575 - DEBUG	- check_left_and_right_brackets - Calling check_left_and_right_brackets(['(', 'T', 'v', '(', 'P', '->', 'Q', ')', ')'])...
2023-08-30 12:12:18,575 - INFO	- check_left_and_right_brackets - PASS: The number of left and right brackets are equal.
2023-08-30 12:12:18,575 - DEBUG	- parse - Calling parse(['(', 'T', 'v', '(', 'P', '->', 'Q', ')', ')'])...
2023-08-30 12:12:18,575 - DEBUG	- remove_outer_brackets - Calling remove_outer_brackets(['(', 'T', 'v', '(', 'P', '->', 'Q', ')', ')'])...
2023-08-30 12:12:18,575 - DEBUG	- remove_outer_brackets - array=['T', 'v', '(', 'P', '->', 'Q', ')']
2023-08-30 12:12:18,575 - DEBUG	- remove_outer_brackets - Finished removing outer brackets.
2023-08-30 12:12:18,575 - DEBUG	- parse - In parse(): arr=['T', 'v', '(', 'P', '->', 'Q', ')']
2023-08-30 12:12:18,575 - DEBUG	- find_connective - Calling find_connectives(['T', 'v', '(', 'P', '->', 'Q', ')'])...
2023-08-30 12:12:18,575 - DEBUG	- find_connective - In find_connective(): elem=v, i=1
2023-08-30 12:12:18,575 - DEBUG	- find_connective - Found connective.
2023-08-30 12:12:18,575 - DEBUG	- parse - Calling parse(['(', 'P', '->', 'Q', ')'])...
2023-08-30 12:12:18,575 - DEBUG	- remove_outer_brackets - Calling remove_outer_brackets(['(', 'P', '->', 'Q', ')'])...
2023-08-30 12:12:18,575 - DEBUG	- remove_outer_brackets - array=['P', '->', 'Q']
2023-08-30 12:12:18,575 - DEBUG	- remove_outer_brackets - Finished removing outer brackets.
2023-08-30 12:12:18,575 - DEBUG	- parse - In parse(): arr=['P', '->', 'Q']
2023-08-30 12:12:18,575 - DEBUG	- find_connective - Calling find_connectives(['P', '->', 'Q'])...
2023-08-30 12:12:18,575 - DEBUG	- find_connective - In find_connective(): elem=->, i=1
2023-08-30 12:12:18,576 - DEBUG	- find_connective - Found connective.
2023-08-30 12:12:18,576 - DEBUG	- parse - temp_array=[['P'], '->', ['Q']]
2023-08-30 12:12:18,576 - DEBUG	- parse - Returning with parsed list for binary connectives.
2023-08-30 12:12:18,576 - DEBUG	- parse - temp_array=[['T'], 'v', [['P'], '->', ['Q']]]
2023-08-30 12:12:18,576 - DEBUG	- parse - Returning with parsed list for binary connectives.
2023-08-30 12:12:18,576 - DEBUG	- parse_array - tree_structured_array=[['T'], 'v', [['P'], '->', ['Q']]]
2023-08-30 12:12:18,576 - DEBUG	- print_details - Printing details...
2023-08-30 12:12:18,576 - INFO	- print_details - *************************** PARSE ***************************
2023-08-30 12:12:18,576 - INFO	- print_details - -> Parsed Array: 	[['T'], 'v', [['P'], '->', ['Q']]]
2023-08-30 12:12:18,576 - INFO	- print_details - *************************** PARSE ***************************
2023-08-30 12:12:18,576 - INFO	- parse_array - Finished parsing array.
2023-08-30 12:12:18,576 - DEBUG	- user_input - In user_input(): 
number_of_variables=3, 
variables_as_array=['T', 'P', 'Q'], 
statement=(T v (P -> Q)), 
new_elements=[['T'], 'v', [['P'], '->', ['Q']]].
2023-08-30 12:12:18,576 - INFO	- user_input - Gathered all information needed including variables and parsed array.
2023-08-30 12:12:18,576 - DEBUG	- simulate_main - In simulate_main(): 
number_of_variables=3, 
variables_as_array=['T', 'P', 'Q'], 
provided_statement=(T v (P -> Q)), 
elements_in_tree=[['T'], 'v', [['P'], '->', ['Q']]]
2023-08-30 12:12:18,576 - DEBUG	- print_details - Printing details...
2023-08-30 12:12:18,576 - INFO	- print_details - ************************** SUMMARY **************************
2023-08-30 12:12:18,576 - INFO	- print_details - -> number_of_variables: 	3
2023-08-30 12:12:18,576 - INFO	- print_details - -> variables_as_array: 	['T', 'P', 'Q']
2023-08-30 12:12:18,576 - INFO	- print_details - -> provided_statement: 	(T v (P -> Q))
2023-08-30 12:12:18,576 - INFO	- print_details - -> elements_in_tree: 	[['T'], 'v', [['P'], '->', ['Q']]]
2023-08-30 12:12:18,577 - INFO	- print_details - ************************** SUMMARY **************************
2023-08-30 12:12:18,577 - INFO	- evaluate_array_as_tree - Starting evaluation of array of elements...
2023-08-30 12:12:18,577 - DEBUG	- create_matrix - Creating initial matrix...
2023-08-30 12:12:18,577 - DEBUG	- recursive_table - Creating table entries recursively...
2023-08-30 12:12:18,577 - DEBUG	- recursive_table - n=3
2023-08-30 12:12:18,577 - DEBUG	- recursive_table - Creating table entries recursively...
2023-08-30 12:12:18,577 - DEBUG	- recursive_table - n=2
2023-08-30 12:12:18,577 - DEBUG	- recursive_table - Creating table entries recursively...
2023-08-30 12:12:18,577 - DEBUG	- recursive_table - n=1
2023-08-30 12:12:18,577 - DEBUG	- recursive_table - array_table=['T', 'F']
2023-08-30 12:12:18,577 - DEBUG	- recursive_table - Finished creating array of table entries.
2023-08-30 12:12:18,577 - DEBUG	- recursive_table - array_table=['TT', 'TF', 'FT', 'FF']
2023-08-30 12:12:18,577 - DEBUG	- recursive_table - Finished creating array of table entries.
2023-08-30 12:12:18,577 - DEBUG	- recursive_table - array_table=['TTT', 'TTF', 'TFT', 'TFF', 'FTT', 'FTF', 'FFT', 'FFF']
2023-08-30 12:12:18,577 - DEBUG	- recursive_table - Finished creating array of table entries.
2023-08-30 12:12:18,577 - DEBUG	- create_matrix - In create_matrix(): new_matrix=[['T', 'T', 'T'], ['T', 'T', 'F'], ['T', 'F', 'T'], ['T', 'F', 'F'], ['F', 'T', 'T'], ['F', 'T', 'F'], ['F', 'F', 'T'], ['F', 'F', 'F']]
2023-08-30 12:12:18,577 - INFO	- create_matrix - Finished creating the initial 'truth' matrix.
2023-08-30 12:12:18,577 - INFO	- create_matrix - *** Initial Matrix:	[['T', 'T', 'T'], ['T', 'T', 'F'], ['T', 'F', 'T'], ['T', 'F', 'F'], ['F', 'T', 'T'], ['F', 'T', 'F'], ['F', 'F', 'T'], ['F', 'F', 'F']] ***
2023-08-30 12:12:18,577 - DEBUG	- evaluate_array_as_tree - In evaluate_array_as_tree(): 
elements_in_tree=[['T'], 'v', [['P'], '->', ['Q']]], 
counter=0, 
matrix=[['T', 'T', 'T'], ['T', 'T', 'F'], ['T', 'F', 'T'], ['T', 'F', 'F'], ['F', 'T', 'T'], ['F', 'T', 'F'], ['F', 'F', 'T'], ['F', 'F', 'F']], 
variables_as_array=['T', 'P', 'Q']
2023-08-30 12:12:18,578 - DEBUG	- evaluate_array - Calling evaluate_array([['T'], 'v', [['P'], '->', ['Q']]], 0, [['T', 'T', 'T'], ['T', 'T', 'F'], ['T', 'F', 'T'], ['T', 'F', 'F'], ['F', 'T', 'T'], ['F', 'T', 'F'], ['F', 'F', 'T'], ['F', 'F', 'F']], ['T', 'P', 'Q'])...
2023-08-30 12:12:18,578 - DEBUG	- evaluate_array - Calling evaluate_array([['P'], '->', ['Q']], 1, [['T', 'T', 'T'], ['T', 'T', 'F'], ['T', 'F', 'T'], ['T', 'F', 'F'], ['F', 'T', 'T'], ['F', 'T', 'F'], ['F', 'F', 'T'], ['F', 'F', 'F']], ['T', 'P', 'Q'])...
2023-08-30 12:12:18,578 - DEBUG	- switch_case - Entering switch_case(->, ['T', 'T', 'F', 'F', 'T', 'T', 'F', 'F'], ['T', 'F', 'T', 'F', 'T', 'F', 'T', 'F'])...
2023-08-30 12:12:18,578 - DEBUG	- cond - In cond. case...
2023-08-30 12:12:18,578 - DEBUG	- conditional - Calling conditional(['T', 'T', 'F', 'F', 'T', 'T', 'F', 'F'], ['T', 'F', 'T', 'F', 'T', 'F', 'T', 'F'])...
2023-08-30 12:12:18,578 - DEBUG	- conditional - new_row_values=['T', 'F', 'T', 'T', 'T', 'F', 'T', 'T']
2023-08-30 12:12:18,578 - DEBUG	- conditional - Returning with new row values.
2023-08-30 12:12:18,578 - DEBUG	- set_new_array_elem - Calling set_new_array_elem([['P'], '->', ['Q']])...
2023-08-30 12:12:18,578 - DEBUG	- set_new_array_elem - new_array=['P->Q']
2023-08-30 12:12:18,578 - DEBUG	- set_new_array_elem - Finished setting new array element.
2023-08-30 12:12:18,578 - DEBUG	- evaluate_array - In evaluate_array(): 
returned_array=['T', 'F', 'T', 'T', 'T', 'F', 'T', 'T'], 
final_variable_combined=['P->Q'], 
matrix=[['T', 'T', 'T'], ['T', 'T', 'F'], ['T', 'F', 'T'], ['T', 'F', 'F'], ['F', 'T', 'T'], ['F', 'T', 'F'], ['F', 'F', 'T'], ['F', 'F', 'F']], 
variables=['T', 'P', 'Q']
2023-08-30 12:12:18,578 - DEBUG	- evaluate_array - Evaluation of array in evaluate_array() is done.
2023-08-30 12:12:18,578 - DEBUG	- add_array_to_matrix - Calling add_array_to_matrix([['T', 'T', 'T'], ['T', 'T', 'F'], ['T', 'F', 'T'], ['T', 'F', 'F'], ['F', 'T', 'T'], ['F', 'T', 'F'], ['F', 'F', 'T'], ['F', 'F', 'F']], ['T', 'F', 'T', 'T', 'T', 'F', 'T', 'T'], ['T', 'P', 'Q'], ['P->Q'])...
2023-08-30 12:12:18,578 - DEBUG	- add_array_to_matrix - variables=['T', 'P', 'Q', 'P->Q']
2023-08-30 12:12:18,578 - DEBUG	- add_array_to_matrix - Added array to matrix.
2023-08-30 12:12:18,578 - DEBUG	- switch_case - Entering switch_case(v, ['T', 'T', 'T', 'T', 'F', 'F', 'F', 'F'], ['T', 'F', 'T', 'T', 'T', 'F', 'T', 'T'])...
2023-08-30 12:12:18,578 - DEBUG	- disj - In disj. case...
2023-08-30 12:12:18,578 - DEBUG	- disjunction - Calling disjunction(['T', 'T', 'T', 'T', 'F', 'F', 'F', 'F'], ['T', 'F', 'T', 'T', 'T', 'F', 'T', 'T'])...
2023-08-30 12:12:18,579 - DEBUG	- disjunction - new_row_values=['T', 'T', 'T', 'T', 'T', 'F', 'T', 'T']
2023-08-30 12:12:18,579 - DEBUG	- disjunction - Returning with new row values.
2023-08-30 12:12:18,579 - DEBUG	- set_new_array_elem - Calling set_new_array_elem([['T'], 'v', ['P->Q']])...
2023-08-30 12:12:18,579 - DEBUG	- set_new_array_elem - new_array=['Tv(P->Q)']
2023-08-30 12:12:18,579 - DEBUG	- set_new_array_elem - Finished setting new array element.
2023-08-30 12:12:18,579 - DEBUG	- evaluate_array - In evaluate_array(): 
returned_array=['T', 'T', 'T', 'T', 'T', 'F', 'T', 'T'], 
final_variable_combined=['Tv(P->Q)'], 
matrix=[['T', 'T', 'T', 'T', 'T'], ['T', 'T', 'F', 'F', 'T'], ['T', 'F', 'T', 'T', 'T'], ['T', 'F', 'F', 'T', 'T'], ['F', 'T', 'T', 'T', 'T'], ['F', 'T', 'F', 'F', 'F'], ['F', 'F', 'T', 'T', 'T'], ['F', 'F', 'F', 'T', 'T']], 
variables=['T', 'P', 'Q', 'P->Q']
2023-08-30 12:12:18,579 - DEBUG	- evaluate_array - Evaluation of array in evaluate_array() is done.
2023-08-30 12:12:18,579 - DEBUG	- evaluate_array_as_tree - returned_array=['T', 'T', 'T', 'T', 'T', 'F', 'T', 'T'], returned_matrix=[['T', 'T', 'T', 'T', 'T'], ['T', 'T', 'F', 'F', 'T'], ['T', 'F', 'T', 'T', 'T'], ['T', 'F', 'F', 'T', 'T'], ['F', 'T', 'T', 'T', 'T'], ['F', 'T', 'F', 'F', 'F'], ['F', 'F', 'T', 'T', 'T'], ['F', 'F', 'F', 'T', 'T']], all_variables=['T', 'P', 'Q', 'P->Q', 'Tv(P->Q)']
2023-08-30 12:12:18,579 - DEBUG	- evaluate_array_as_tree - Finished evaluating array.
2023-08-30 12:12:18,579 - DEBUG	- simulate_main - In simulate_main(): 
final_value_array=['T', 'T', 'T', 'T', 'T', 'F', 'T', 'T'], 
returned_matrix=[['T', 'T', 'T', 'T', 'T'], ['T', 'T', 'F', 'F', 'T'], ['T', 'F', 'T', 'T', 'T'], ['T', 'F', 'F', 'T', 'T'], ['F', 'T', 'T', 'T', 'T'], ['F', 'T', 'F', 'F', 'F'], ['F', 'F', 'T', 'T', 'T'], ['F', 'F', 'F', 'T', 'T']], 
all_variables=['T', 'P', 'Q', 'P->Q', 'Tv(P->Q)']
2023-08-30 12:12:18,579 - DEBUG	- print_details - Printing details...
2023-08-30 12:12:18,579 - INFO	- print_details - ************************** EVALUATE **************************
2023-08-30 12:12:18,579 - INFO	- print_details - -> Statement: 	(T v (P -> Q))
2023-08-30 12:12:18,579 - INFO	- print_details - -> Final Calculated Array: 	['T', 'T', 'T', 'T', 'T', 'F', 'T', 'T']
2023-08-30 12:12:18,579 - INFO	- print_details - -> All Variables: 	['T', 'P', 'Q', 'P->Q', 'Tv(P->Q)']
2023-08-30 12:12:18,579 - INFO	- print_details - -> Final Matrix: 	[['T', 'T', 'T', 'T', 'T'], ['T', 'T', 'F', 'F', 'T'], ['T', 'F', 'T', 'T', 'T'], ['T', 'F', 'F', 'T', 'T'], ['F', 'T', 'T', 'T', 'T'], ['F', 'T', 'F', 'F', 'F'], ['F', 'F', 'T', 'T', 'T'], ['F', 'F', 'F', 'T', 'T']]
2023-08-30 12:12:18,579 - INFO	- print_details - ************************** EVALUATE **************************
2023-08-30 12:12:18,579 - INFO	- simulate_main - Finished evaluating statement.
2023-08-30 12:12:18,580 - DEBUG	- display_matrix - Displaying matrix to console...
2023-08-30 12:12:18,580 - DEBUG	- get_number_of_spaces - Calling get_number_of_spaces(3, 1, ['T', 'P', 'Q', 'P->Q', 'Tv(P->Q)'])...
2023-08-30 12:12:18,580 - DEBUG	- get_number_of_spaces - total_space=32
2023-08-30 12:12:18,580 - DEBUG	- get_number_of_spaces - Finished calculating the total space.
2023-08-30 12:12:18,580 - DEBUG	- simulate_main - Returning from simulate_main()...
2023-08-30 12:12:18,580 - INFO	- simulate_main - Statement:	((T ^ Q) v (P ^ Q))
2023-08-30 12:12:18,580 - INFO	- simulate_main - Before proceeding, doing checks for unequal brackets and illegal characters.
2023-08-30 12:12:18,580 - DEBUG	- check_left_and_right_brackets - Calling check_left_and_right_brackets(((T ^ Q) v (P ^ Q)))...
2023-08-30 12:12:18,580 - INFO	- check_left_and_right_brackets - PASS: The number of left and right brackets are equal.
2023-08-30 12:12:18,580 - DEBUG	- check_for_illegal_characters - Calling check_for_illegal_characters(((T ^ Q) v (P ^ Q)))
2023-08-30 12:12:18,580 - DEBUG	- check_for_illegal_characters - ******************** starting input validation *******************
2023-08-30 12:12:18,580 - DEBUG	- validate_input - Calling validate_input(T)...
2023-08-30 12:12:18,580 - DEBUG	- validate_input - Checked against a regex. result(is it valid?)=True.
2023-08-30 12:12:18,580 - DEBUG	- validate_input - Calling validate_input(^)...
2023-08-30 12:12:18,580 - DEBUG	- validate_input - Checked against a regex. result(is it valid?)=True.
2023-08-30 12:12:18,580 - DEBUG	- validate_input - Calling validate_input(Q)...
2023-08-30 12:12:18,581 - DEBUG	- validate_input - Checked against a regex. result(is it valid?)=True.
2023-08-30 12:12:18,581 - DEBUG	- validate_input - Calling validate_input(v)...
2023-08-30 12:12:18,581 - DEBUG	- validate_input - Checked against a regex. result(is it valid?)=True.
2023-08-30 12:12:18,581 - DEBUG	- validate_input - Calling validate_input(P)...
2023-08-30 12:12:18,581 - DEBUG	- validate_input - Checked against a regex. result(is it valid?)=True.
2023-08-30 12:12:18,581 - DEBUG	- validate_input - Calling validate_input(^)...
2023-08-30 12:12:18,581 - DEBUG	- validate_input - Checked against a regex. result(is it valid?)=True.
2023-08-30 12:12:18,581 - DEBUG	- validate_input - Calling validate_input(Q)...
2023-08-30 12:12:18,581 - DEBUG	- validate_input - Checked against a regex. result(is it valid?)=True.
2023-08-30 12:12:18,581 - DEBUG	- check_for_illegal_characters - ******************** finished input validation *******************
2023-08-30 12:12:18,581 - INFO	- check_for_illegal_characters - PASS: There were no illegal characters found.
2023-08-30 12:12:18,581 - INFO	- simulate_main - All checks are valid, proceeding with extracting information from statement.
2023-08-30 12:12:18,581 - INFO	- user_input - Processing statement...
2023-08-30 12:12:18,581 - DEBUG	- user_input - statement=((T ^ Q) v (P ^ Q))
2023-08-30 12:12:18,581 - INFO	- analyze_statement - Starting to analyze statement...
2023-08-30 12:12:18,581 - INFO	- analyze_statement - The statement is sanitized from any whitespaces.
2023-08-30 12:12:18,581 - DEBUG	- analyze_statement - All whitespaces need to be removed, proceeding.
2023-08-30 12:12:18,581 - DEBUG	- clean_whitespaces - Calling clean_whitespaces(((T ^ Q) v (P ^ Q)))...
2023-08-30 12:12:18,581 - DEBUG	- clean_whitespaces - Finished removing whitespaces: statement=((T^Q)v(P^Q))
2023-08-30 12:12:18,581 - DEBUG	- analyze_statement - Finished removing any whitespaces found in statement. Proceeding with finding variables.
2023-08-30 12:12:18,582 - INFO	- find_variables - Finding variables in statement...
2023-08-30 12:12:18,582 - DEBUG	- find_variables - statement=((T^Q)v(P^Q))
2023-08-30 12:12:18,582 - DEBUG	- find_variables - variables_array=['T', 'Q', 'P']
2023-08-30 12:12:18,582 - INFO	- find_variables - Found all variables in statement.
2023-08-30 12:12:18,582 - INFO	- find_variables - *** Variables:	['T', 'Q', 'P'] ***
2023-08-30 12:12:18,582 - DEBUG	- analyze_statement - variables_arr=['T', 'Q', 'P']
2023-08-30 12:12:18,582 - INFO	- analyze_statement - The statement is converted to an array and any conditionals are sanitized.
2023-08-30 12:12:18,582 - DEBUG	- create_array_of_elements - Creating an array from a string...
2023-08-30 12:12:18,582 - DEBUG	- create_array_of_elements - Calling create_array_of_elements(((T^Q)v(P^Q)))
2023-08-30 12:12:18,582 - DEBUG	- create_array_of_elements - array_of_elements=['(', '(', 'T', '^', 'Q', ')', 'v', '(', 'P', '^', 'Q', ')', ')']
2023-08-30 12:12:18,582 - DEBUG	- create_array_of_elements - Finished creating array.
2023-08-30 12:12:18,582 - DEBUG	- check_conditionals - Calling check_conditionals(['(', '(', 'T', '^', 'Q', ')', 'v', '(', 'P', '^', 'Q', ')', ')'], ['T', 'Q', 'P'])...
2023-08-30 12:12:18,582 - INFO	- check_conditionals - PASS: Any conditional symbols present, are in the desired form.
2023-08-30 12:12:18,582 - DEBUG	- create_conditionals - Creating one-piece conditionals from single elements.
2023-08-30 12:12:18,582 - DEBUG	- create_conditionals - Searching for a '-' in array_of_elements=['(', '(', 'T', '^', 'Q', ')', 'v', '(', 'P', '^', 'Q', ')', ')']
2023-08-30 12:12:18,582 - DEBUG	- create_conditionals - Search for conditionals finished and none were found, returning.
2023-08-30 12:12:18,582 - DEBUG	- analyze_statement - In analyze_statement(): 
len(variables_arr)=3, 
variables_arr=['T', 'Q', 'P'], 
array_of_elements=['(', '(', 'T', '^', 'Q', ')', 'v', '(', 'P', '^', 'Q', ')', ')']
2023-08-30 12:12:18,582 - DEBUG	- print_details - Printing details...
2023-08-30 12:12:18,582 - INFO	- print_details - ************************** ANALYSIS **************************
2023-08-30 12:12:18,582 - INFO	- print_details - -> Number of Variables: 	3
2023-08-30 12:12:18,583 - INFO	- print_details - -> Variables: 	['T', 'Q', 'P']
2023-08-30 12:12:18,583 - INFO	- print_details - -> Array of Elements: 	['(', '(', 'T', '^', 'Q', ')', 'v', '(', 'P', '^', 'Q', ')', ')']
2023-08-30 12:12:18,583 - INFO	- print_details - ************************** ANALYSIS **************************
2023-08-30 12:12:18,583 - INFO	- analyze_statement - Analyzing concluded.
2023-08-30 12:12:18,583 - INFO	- parse_array - Starting to parse array...
2023-08-30 12:12:18,583 - DEBUG	- remove_brackets_around_variables - Removing brackets around standalone variables...
2023-08-30 12:12:18,583 - DEBUG	- remove_brackets_around_variables - arr=['(', '(', 'T', '^', 'Q', ')', 'v', '(', 'P', '^', 'Q', ')', ')']
2023-08-30 12:12:18,583 - DEBUG	- remove_brackets_around_variables - Finished removing all brackets around variables.
2023-08-30 12:12:18,583 - DEBUG	- parse_array - In parse_array(): elements_second=['(', '(', 'T', '^', 'Q', ')', 'v', '(', 'P', '^', 'Q', ')', ')']
2023-08-30 12:12:18,583 - DEBUG	- add_brackets_around_unary_connectives - Adding brackets around unary connectives...
2023-08-30 12:12:18,583 - DEBUG	- add_brackets_around_unary_connectives - arr=['(', '(', 'T', '^', 'Q', ')', 'v', '(', 'P', '^', 'Q', ')', ')']
2023-08-30 12:12:18,583 - DEBUG	- add_brackets_around_unary_connectives - Finished adding brackets around all unary connectives.
2023-08-30 12:12:18,583 - DEBUG	- parse_array - In parse_array(): elements_second=['(', '(', 'T', '^', 'Q', ')', 'v', '(', 'P', '^', 'Q', ')', ')']
2023-08-30 12:12:18,583 - INFO	- parse_array - Final checks are ran before parsing concludes.
2023-08-30 12:12:18,583 - DEBUG	- check_left_and_right_brackets - Calling check_left_and_right_brackets(['(', '(', 'T', '^', 'Q', ')', 'v', '(', 'P', '^', 'Q', ')', ')'])...
2023-08-30 12:12:18,583 - INFO	- check_left_and_right_brackets - PASS: The number of left and right brackets are equal.
2023-08-30 12:12:18,583 - DEBUG	- parse - Calling parse(['(', '(', 'T', '^', 'Q', ')', 'v', '(', 'P', '^', 'Q', ')', ')'])...
2023-08-30 12:12:18,584 - DEBUG	- remove_outer_brackets - Calling remove_outer_brackets(['(', '(', 'T', '^', 'Q', ')', 'v', '(', 'P', '^', 'Q', ')', ')'])...
2023-08-30 12:12:18,584 - DEBUG	- remove_outer_brackets - array=['(', 'T', '^', 'Q', ')', 'v', '(', 'P', '^', 'Q', ')']
2023-08-30 12:12:18,584 - DEBUG	- remove_outer_brackets - Finished removing outer brackets.
2023-08-30 12:12:18,584 - DEBUG	- parse - In parse(): arr=['(', 'T', '^', 'Q', ')', 'v', '(', 'P', '^', 'Q', ')']
2023-08-30 12:12:18,584 - DEBUG	- find_connective - Calling find_connectives(['(', 'T', '^', 'Q', ')', 'v', '(', 'P', '^', 'Q', ')'])...
2023-08-30 12:12:18,584 - DEBUG	- find_connective - In find_connective(): elem=v, i=5
2023-08-30 12:12:18,584 - DEBUG	- find_connective - Found connective.
2023-08-30 12:12:18,584 - DEBUG	- parse - Calling parse(['(', 'T', '^', 'Q', ')'])...
2023-08-30 12:12:18,584 - DEBUG	- remove_outer_brackets - Calling remove_outer_brackets(['(', 'T', '^', 'Q', ')'])...
2023-08-30 12:12:18,584 - DEBUG	- remove_outer_brackets - array=['T', '^', 'Q']
2023-08-30 12:12:18,584 - DEBUG	- remove_outer_brackets - Finished removing outer brackets.
2023-08-30 12:12:18,584 - DEBUG	- parse - In parse(): arr=['T', '^', 'Q']
2023-08-30 12:12:18,584 - DEBUG	- find_connective - Calling find_connectives(['T', '^', 'Q'])...
2023-08-30 12:12:18,584 - DEBUG	- find_connective - In find_connective(): elem=^, i=1
2023-08-30 12:12:18,584 - DEBUG	- find_connective - Found connective.
2023-08-30 12:12:18,584 - DEBUG	- parse - temp_array=[['T'], '^', ['Q']]
2023-08-30 12:12:18,584 - DEBUG	- parse - Returning with parsed list for binary connectives.
2023-08-30 12:12:18,584 - DEBUG	- parse - Calling parse(['(', 'P', '^', 'Q', ')'])...
2023-08-30 12:12:18,585 - DEBUG	- remove_outer_brackets - Calling remove_outer_brackets(['(', 'P', '^', 'Q', ')'])...
2023-08-30 12:12:18,585 - DEBUG	- remove_outer_brackets - array=['P', '^', 'Q']
2023-08-30 12:12:18,585 - DEBUG	- remove_outer_brackets - Finished removing outer brackets.
2023-08-30 12:12:18,585 - DEBUG	- parse - In parse(): arr=['P', '^', 'Q']
2023-08-30 12:12:18,585 - DEBUG	- find_connective - Calling find_connectives(['P', '^', 'Q'])...
2023-08-30 12:12:18,585 - DEBUG	- find_connective - In find_connective(): elem=^, i=1
2023-08-30 12:12:18,585 - DEBUG	- find_connective - Found connective.
2023-08-30 12:12:18,585 - DEBUG	- parse - temp_array=[['P'], '^', ['Q']]
2023-08-30 12:12:18,585 - DEBUG	- parse - Returning with parsed list for binary connectives.
2023-08-30 12:12:18,585 - DEBUG	- parse - temp_array=[[['T'], '^', ['Q']], 'v', [['P'], '^', ['Q']]]
2023-08-30 12:12:18,585 - DEBUG	- parse - Returning with parsed list for binary connectives.
2023-08-30 12:12:18,585 - DEBUG	- parse_array - tree_structured_array=[[['T'], '^', ['Q']], 'v', [['P'], '^', ['Q']]]
2023-08-30 12:12:18,585 - DEBUG	- print_details - Printing details...
2023-08-30 12:12:18,585 - INFO	- print_details - *************************** PARSE ***************************
2023-08-30 12:12:18,585 - INFO	- print_details - -> Parsed Array: 	[[['T'], '^', ['Q']], 'v', [['P'], '^', ['Q']]]
2023-08-30 12:12:18,585 - INFO	- print_details - *************************** PARSE ***************************
2023-08-30 12:12:18,585 - INFO	- parse_array - Finished parsing array.
2023-08-30 12:12:18,585 - DEBUG	- user_input - In user_input(): 
number_of_variables=3, 
variables_as_array=['T', 'Q', 'P'], 
statement=((T ^ Q) v (P ^ Q)), 
new_elements=[[['T'], '^', ['Q']], 'v', [['P'], '^', ['Q']]].
2023-08-30 12:12:18,586 - INFO	- user_input - Gathered all information needed including variables and parsed array.
2023-08-30 12:12:18,586 - DEBUG	- simulate_main - In simulate_main(): 
number_of_variables=3, 
variables_as_array=['T', 'Q', 'P'], 
provided_statement=((T ^ Q) v (P ^ Q)), 
elements_in_tree=[[['T'], '^', ['Q']], 'v', [['P'], '^', ['Q']]]
2023-08-30 12:12:18,586 - DEBUG	- print_details - Printing details...
2023-08-30 12:12:18,586 - INFO	- print_details - ************************** SUMMARY **************************
2023-08-30 12:12:18,586 - INFO	- print_details - -> number_of_variables: 	3
2023-08-30 12:12:18,586 - INFO	- print_details - -> variables_as_array: 	['T', 'Q', 'P']
2023-08-30 12:12:18,586 - INFO	- print_details - -> provided_statement: 	((T ^ Q) v (P ^ Q))
2023-08-30 12:12:18,586 - INFO	- print_details - -> elements_in_tree: 	[[['T'], '^', ['Q']], 'v', [['P'], '^', ['Q']]]
2023-08-30 12:12:18,586 - INFO	- print_details - ************************** SUMMARY **************************
2023-08-30 12:12:18,586 - INFO	- evaluate_array_as_tree - Starting evaluation of array of elements...
2023-08-30 12:12:18,586 - DEBUG	- create_matrix - Creating initial matrix...
2023-08-30 12:12:18,586 - DEBUG	- recursive_table - Creating table entries recursively...
2023-08-30 12:12:18,586 - DEBUG	- recursive_table - n=3
2023-08-30 12:12:18,586 - DEBUG	- recursive_table - Creating table entries recursively...
2023-08-30 12:12:18,586 - DEBUG	- recursive_table - n=2
2023-08-30 12:12:18,586 - DEBUG	- recursive_table - Creating table entries recursively...
2023-08-30 12:12:18,586 - DEBUG	- recursive_table - n=1
2023-08-30 12:12:18,587 - DEBUG	- recursive_table - array_table=['T', 'F']
2023-08-30 12:12:18,587 - DEBUG	- recursive_table - Finished creating array of table entries.
2023-08-30 12:12:18,587 - DEBUG	- recursive_table - array_table=['TT', 'TF', 'FT', 'FF']
2023-08-30 12:12:18,587 - DEBUG	- recursive_table - Finished creating array of table entries.
2023-08-30 12:12:18,587 - DEBUG	- recursive_table - array_table=['TTT', 'TTF', 'TFT', 'TFF', 'FTT', 'FTF', 'FFT', 'FFF']
2023-08-30 12:12:18,587 - DEBUG	- recursive_table - Finished creating array of table entries.
2023-08-30 12:12:18,587 - DEBUG	- create_matrix - In create_matrix(): new_matrix=[['T', 'T', 'T'], ['T', 'T', 'F'], ['T', 'F', 'T'], ['T', 'F', 'F'], ['F', 'T', 'T'], ['F', 'T', 'F'], ['F', 'F', 'T'], ['F', 'F', 'F']]
2023-08-30 12:12:18,587 - INFO	- create_matrix - Finished creating the initial 'truth' matrix.
2023-08-30 12:12:18,587 - INFO	- create_matrix - *** Initial Matrix:	[['T', 'T', 'T'], ['T', 'T', 'F'], ['T', 'F', 'T'], ['T', 'F', 'F'], ['F', 'T', 'T'], ['F', 'T', 'F'], ['F', 'F', 'T'], ['F', 'F', 'F']] ***
2023-08-30 12:12:18,587 - DEBUG	- evaluate_array_as_tree - In evaluate_array_as_tree(): 
elements_in_tree=[[['T'], '^', ['Q']], 'v', [['P'], '^', ['Q']]], 
counter=0, 
matrix=[['T', 'T', 'T'], ['T', 'T', 'F'], ['T', 'F', 'T'], ['T', 'F', 'F'], ['F', 'T', 'T'], ['F', 'T', 'F'], ['F', 'F', 'T'], ['F', 'F', 'F']], 
variables_as_array=['T', 'Q', 'P']
2023-08-30 12:12:18,587 - DEBUG	- evaluate_array - Calling evaluate_array([[['T'], '^', ['Q']], 'v', [['P'], '^', ['Q']]], 0, [['T', 'T', 'T'], ['T', 'T', 'F'], ['T', 'F', 'T'], ['T', 'F', 'F'], ['F', 'T', 'T'], ['F', 'T', 'F'], ['F', 'F', 'T'], ['F', 'F', 'F']], ['T', 'Q', 'P'])...
2023-08-30 12:12:18,587 - DEBUG	- evaluate_array - Calling evaluate_array([['T'], '^', ['Q']], 1, [['T', 'T', 'T'], ['T', 'T', 'F'], ['T', 'F', 'T'], ['T', 'F', 'F'], ['F', 'T', 'T'], ['F', 'T', 'F'], ['F', 'F', 'T'], ['F', 'F', 'F']], ['T', 'Q', 'P'])...
2023-08-30 12:12:18,587 - DEBUG	- switch_case - Entering switch_case(^, ['T', 'T', 'T', 'T', 'F', 'F', 'F', 'F'], ['T', 'T', 'F', 'F', 'T', 'T', 'F', 'F'])...
2023-08-30 12:12:18,587 - DEBUG	- conj - In conj. case...
2023-08-30 12:12:18,587 - DEBUG	- conjunction - Calling conjunction(['T', 'T', 'T', 'T', 'F', 'F', 'F', 'F'], ['T', 'T', 'F', 'F', 'T', 'T', 'F', 'F'])...
2023-08-30 12:12:18,587 - DEBUG	- conjunction - new_row_values=['T', 'T', 'F', 'F', 'F', 'F', 'F', 'F']
2023-08-30 12:12:18,587 - DEBUG	- conjunction - Returning with new row values.
2023-08-30 12:12:18,587 - DEBUG	- set_new_array_elem - Calling set_new_array_elem([['T'], '^', ['Q']])...
2023-08-30 12:12:18,587 - DEBUG	- set_new_array_elem - new_array=['T^Q']
2023-08-30 12:12:18,588 - DEBUG	- set_new_array_elem - Finished setting new array element.
2023-08-30 12:12:18,588 - DEBUG	- evaluate_array - In evaluate_array(): 
returned_array=['T', 'T', 'F', 'F', 'F', 'F', 'F', 'F'], 
final_variable_combined=['T^Q'], 
matrix=[['T', 'T', 'T'], ['T', 'T', 'F'], ['T', 'F', 'T'], ['T', 'F', 'F'], ['F', 'T', 'T'], ['F', 'T', 'F'], ['F', 'F', 'T'], ['F', 'F', 'F']], 
variables=['T', 'Q', 'P']
2023-08-30 12:12:18,588 - DEBUG	- evaluate_array - Evaluation of array in evaluate_array() is done.
2023-08-30 12:12:18,588 - DEBUG	- add_array_to_matrix - Calling add_array_to_matrix([['T', 'T', 'T'], ['T', 'T', 'F'], ['T', 'F', 'T'], ['T', 'F', 'F'], ['F', 'T', 'T'], ['F', 'T', 'F'], ['F', 'F', 'T'], ['F', 'F', 'F']], ['T', 'T', 'F', 'F', 'F', 'F', 'F', 'F'], ['T', 'Q', 'P'], ['T^Q'])...
2023-08-30 12:12:18,588 - DEBUG	- add_array_to_matrix - variables=['T', 'Q', 'P', 'T^Q']
2023-08-30 12:12:18,588 - DEBUG	- add_array_to_matrix - Added array to matrix.
2023-08-30 12:12:18,588 - DEBUG	- evaluate_array - Calling evaluate_array([['P'], '^', ['Q']], 1, [['T', 'T', 'T', 'T'], ['T', 'T', 'F', 'T'], ['T', 'F', 'T', 'F'], ['T', 'F', 'F', 'F'], ['F', 'T', 'T', 'F'], ['F', 'T', 'F', 'F'], ['F', 'F', 'T', 'F'], ['F', 'F', 'F', 'F']], ['T', 'Q', 'P', 'T^Q'])...
2023-08-30 12:12:18,588 - DEBUG	- switch_case - Entering switch_case(^, ['T', 'F', 'T', 'F', 'T', 'F', 'T', 'F'], ['T', 'T', 'F', 'F', 'T', 'T', 'F', 'F'])...
2023-08-30 12:12:18,588 - DEBUG	- conj - In conj. case...
2023-08-30 12:12:18,588 - DEBUG	- conjunction - Calling conjunction(['T', 'F', 'T', 'F', 'T', 'F', 'T', 'F'], ['T', 'T', 'F', 'F', 'T', 'T', 'F', 'F'])...
2023-08-30 12:12:18,588 - DEBUG	- conjunction - new_row_values=['T', 'F', 'F', 'F', 'T', 'F', 'F', 'F']
2023-08-30 12:12:18,588 - DEBUG	- conjunction - Returning with new row values.
2023-08-30 12:12:18,588 - DEBUG	- set_new_array_elem - Calling set_new_array_elem([['P'], '^', ['Q']])...
2023-08-30 12:12:18,588 - DEBUG	- set_new_array_elem - new_array=['P^Q']
2023-08-30 12:12:18,588 - DEBUG	- set_new_array_elem - Finished setting new array element.
2023-08-30 12:12:18,588 - DEBUG	- evaluate_array - In evaluate_array(): 
returned_array=['T', 'F', 'F', 'F', 'T', 'F', 'F', 'F'], 
final_variable_combined=['P^Q'], 
matrix=[['T', 'T', 'T', 'T'], ['T', 'T', 'F', 'T'], ['T', 'F', 'T', 'F'], ['T', 'F', 'F', 'F'], ['F', 'T', 'T', 'F'], ['F', 'T', 'F', 'F'], ['F', 'F', 'T', 'F'], ['F', 'F', 'F', 'F']], 
variables=['T', 'Q', 'P', 'T^Q']
2023-08-30 12:12:18,588 - DEBUG	- evaluate_array - Evaluation of array in evaluate_array() is done.
2023-08-30 12:12:18,588 - DEBUG	- add_array_to_matrix - Calling add_array_to_matrix([['T', 'T', 'T', 'T'], ['T', 'T', 'F', 'T'], ['T', 'F', 'T', 'F'], ['T', 'F', 'F', 'F'], ['F', 'T', 'T', 'F'], ['F', 'T', 'F', 'F'], ['F', 'F', 'T', 'F'], ['F', 'F', 'F', 'F']], ['T', 'F', 'F', 'F', 'T', 'F', 'F', 'F'], ['T', 'Q', 'P', 'T^Q'], ['P^Q'])...
2023-08-30 12:12:18,589 - DEBUG	- add_array_to_matrix - variables=['T', 'Q', 'P', 'T^Q', 'P^Q']
2023-08-30 12:12:18,589 - DEBUG	- add_array_to_matrix - Added array to matrix.
2023-08-30 12:12:18,589 - DEBUG	- switch_case - Entering switch_case(v, ['T', 'T', 'F', 'F', 'F', 'F', 'F', 'F'], ['T', 'F', 'F', 'F', 'T', 'F', 'F', 'F'])...
2023-08-30 12:12:18,589 - DEBUG	- disj - In disj. case...
2023-08-30 12:12:18,589 - DEBUG	- disjunction - Calling disjunction(['T', 'T', 'F', 'F', 'F', 'F', 'F', 'F'], ['T', 'F', 'F', 'F', 'T', 'F', 'F', 'F'])...
2023-08-30 12:12:18,589 - DEBUG	- disjunction - new_row_values=['T', 'T', 'F', 'F', 'T', 'F', 'F', 'F']
2023-08-30 12:12:18,589 - DEBUG	- disjunction - Returning with new row values.
2023-08-30 12:12:18,589 - DEBUG	- set_new_array_elem - Calling set_new_array_elem([['T^Q'], 'v', ['P^Q']])...
2023-08-30 12:12:18,589 - DEBUG	- set_new_array_elem - new_array=['(T^Q)v(P^Q)']
2023-08-30 12:12:18,589 - DEBUG	- set_new_array_elem - Finished setting new array element.
2023-08-30 12:12:18,589 - DEBUG	- evaluate_array - In evaluate_array(): 
returned_array=['T', 'T', 'F', 'F', 'T', 'F', 'F', 'F'], 
final_variable_combined=['(T^Q)v(P^Q)'], 
matrix=[['T', 'T', 'T', 'T', 'T', 'T'], ['T', 'T', 'F', 'T', 'F', 'T'], ['T', 'F', 'T', 'F', 'F', 'F'], ['T', 'F', 'F', 'F', 'F', 'F'], ['F', 'T', 'T', 'F', 'T', 'T'], ['F', 'T', 'F', 'F', 'F', 'F'], ['F', 'F', 'T', 'F', 'F', 'F'], ['F', 'F', 'F', 'F', 'F', 'F']], 
variables=['T', 'Q', 'P', 'T^Q', 'P^Q']
2023-08-30 12:12:18,589 - DEBUG	- evaluate_array - Evaluation of array in evaluate_array() is done.
2023-08-30 12:12:18,589 - DEBUG	- evaluate_array_as_tree - returned_array=['T', 'T', 'F', 'F', 'T', 'F', 'F', 'F'], returned_matrix=[['T', 'T', 'T', 'T', 'T', 'T'], ['T', 'T', 'F', 'T', 'F', 'T'], ['T', 'F', 'T', 'F', 'F', 'F'], ['T', 'F', 'F', 'F', 'F', 'F'], ['F', 'T', 'T', 'F', 'T', 'T'], ['F', 'T', 'F', 'F', 'F', 'F'], ['F', 'F', 'T', 'F', 'F', 'F'], ['F', 'F', 'F', 'F', 'F', 'F']], all_variables=['T', 'Q', 'P', 'T^Q', 'P^Q', '(T^Q)v(P^Q)']
2023-08-30 12:12:18,589 - DEBUG	- evaluate_array_as_tree - Finished evaluating array.
2023-08-30 12:12:18,589 - DEBUG	- simulate_main - In simulate_main(): 
final_value_array=['T', 'T', 'F', 'F', 'T', 'F', 'F', 'F'], 
returned_matrix=[['T', 'T', 'T', 'T', 'T', 'T'], ['T', 'T', 'F', 'T', 'F', 'T'], ['T', 'F', 'T', 'F', 'F', 'F'], ['T', 'F', 'F', 'F', 'F', 'F'], ['F', 'T', 'T', 'F', 'T', 'T'], ['F', 'T', 'F', 'F', 'F', 'F'], ['F', 'F', 'T', 'F', 'F', 'F'], ['F', 'F', 'F', 'F', 'F', 'F']], 
all_variables=['T', 'Q', 'P', 'T^Q', 'P^Q', '(T^Q)v(P^Q)']
2023-08-30 12:12:18,589 - DEBUG	- print_details - Printing details...
2023-08-30 12:12:18,589 - INFO	- print_details - ************************** EVALUATE **************************
2023-08-30 12:12:18,589 - INFO	- print_details - -> Statement: 	((T ^ Q) v (P ^ Q))
2023-08-30 12:12:18,589 - INFO	- print_details - -> Final Calculated Array: 	['T', 'T', 'F', 'F', 'T', 'F', 'F', 'F']
2023-08-30 12:12:18,589 - INFO	- print_details - -> All Variables: 	['T', 'Q', 'P', 'T^Q', 'P^Q', '(T^Q)v(P^Q)']
2023-08-30 12:12:18,590 - INFO	- print_details - -> Final Matrix: 	[['T', 'T', 'T', 'T', 'T', 'T'], ['T', 'T', 'F', 'T', 'F', 'T'], ['T', 'F', 'T', 'F', 'F', 'F'], ['T', 'F', 'F', 'F', 'F', 'F'], ['F', 'T', 'T', 'F', 'T', 'T'], ['F', 'T', 'F', 'F', 'F', 'F'], ['F', 'F', 'T', 'F', 'F', 'F'], ['F', 'F', 'F', 'F', 'F', 'F']]
2023-08-30 12:12:18,590 - INFO	- print_details - ************************** EVALUATE **************************
2023-08-30 12:12:18,590 - INFO	- simulate_main - Finished evaluating statement.
2023-08-30 12:12:18,590 - DEBUG	- display_matrix - Displaying matrix to console...
2023-08-30 12:12:18,590 - DEBUG	- get_number_of_spaces - Calling get_number_of_spaces(3, 2, ['T', 'Q', 'P', 'T^Q', 'P^Q', '(T^Q)v(P^Q)'])...
2023-08-30 12:12:18,590 - DEBUG	- get_number_of_spaces - total_space=40
2023-08-30 12:12:18,590 - DEBUG	- get_number_of_spaces - Finished calculating the total space.
2023-08-30 12:12:18,590 - DEBUG	- simulate_main - Returning from simulate_main()...
2023-08-30 12:12:18,590 - INFO	- simulate_main - Statement:	(S ^ (R ^ Q))
2023-08-30 12:12:18,590 - INFO	- simulate_main - Before proceeding, doing checks for unequal brackets and illegal characters.
2023-08-30 12:12:18,590 - DEBUG	- check_left_and_right_brackets - Calling check_left_and_right_brackets((S ^ (R ^ Q)))...
2023-08-30 12:12:18,590 - INFO	- check_left_and_right_brackets - PASS: The number of left and right brackets are equal.
2023-08-30 12:12:18,590 - DEBUG	- check_for_illegal_characters - Calling check_for_illegal_characters((S ^ (R ^ Q)))
2023-08-30 12:12:18,590 - DEBUG	- check_for_illegal_characters - ******************** starting input validation *******************
2023-08-30 12:12:18,590 - DEBUG	- validate_input - Calling validate_input(S)...
2023-08-30 12:12:18,590 - DEBUG	- validate_input - Checked against a regex. result(is it valid?)=True.
2023-08-30 12:12:18,590 - DEBUG	- validate_input - Calling validate_input(^)...
2023-08-30 12:12:18,591 - DEBUG	- validate_input - Checked against a regex. result(is it valid?)=True.
2023-08-30 12:12:18,591 - DEBUG	- validate_input - Calling validate_input(R)...
2023-08-30 12:12:18,591 - DEBUG	- validate_input - Checked against a regex. result(is it valid?)=True.
2023-08-30 12:12:18,591 - DEBUG	- validate_input - Calling validate_input(^)...
2023-08-30 12:12:18,591 - DEBUG	- validate_input - Checked against a regex. result(is it valid?)=True.
2023-08-30 12:12:18,591 - DEBUG	- validate_input - Calling validate_input(Q)...
2023-08-30 12:12:18,591 - DEBUG	- validate_input - Checked against a regex. result(is it valid?)=True.
2023-08-30 12:12:18,591 - DEBUG	- check_for_illegal_characters - ******************** finished input validation *******************
2023-08-30 12:12:18,591 - INFO	- check_for_illegal_characters - PASS: There were no illegal characters found.
2023-08-30 12:12:18,591 - INFO	- simulate_main - All checks are valid, proceeding with extracting information from statement.
2023-08-30 12:12:18,591 - INFO	- user_input - Processing statement...
2023-08-30 12:12:18,591 - DEBUG	- user_input - statement=(S ^ (R ^ Q))
2023-08-30 12:12:18,591 - INFO	- analyze_statement - Starting to analyze statement...
2023-08-30 12:12:18,591 - INFO	- analyze_statement - The statement is sanitized from any whitespaces.
2023-08-30 12:12:18,591 - DEBUG	- analyze_statement - All whitespaces need to be removed, proceeding.
2023-08-30 12:12:18,591 - DEBUG	- clean_whitespaces - Calling clean_whitespaces((S ^ (R ^ Q)))...
2023-08-30 12:12:18,591 - DEBUG	- clean_whitespaces - Finished removing whitespaces: statement=(S^(R^Q))
2023-08-30 12:12:18,591 - DEBUG	- analyze_statement - Finished removing any whitespaces found in statement. Proceeding with finding variables.
2023-08-30 12:12:18,591 - INFO	- find_variables - Finding variables in statement...
2023-08-30 12:12:18,591 - DEBUG	- find_variables - statement=(S^(R^Q))
2023-08-30 12:12:18,591 - DEBUG	- find_variables - variables_array=['S', 'R', 'Q']
2023-08-30 12:12:18,592 - INFO	- find_variables - Found all variables in statement.
2023-08-30 12:12:18,592 - INFO	- find_variables - *** Variables:	['S', 'R', 'Q'] ***
2023-08-30 12:12:18,592 - DEBUG	- analyze_statement - variables_arr=['S', 'R', 'Q']
2023-08-30 12:12:18,592 - INFO	- analyze_statement - The statement is converted to an array and any conditionals are sanitized.
2023-08-30 12:12:18,592 - DEBUG	- create_array_of_elements - Creating an array from a string...
2023-08-30 12:12:18,592 - DEBUG	- create_array_of_elements - Calling create_array_of_elements((S^(R^Q)))
2023-08-30 12:12:18,592 - DEBUG	- create_array_of_elements - array_of_elements=['(', 'S', '^', '(', 'R', '^', 'Q', ')', ')']
2023-08-30 12:12:18,592 - DEBUG	- create_array_of_elements - Finished creating array.
2023-08-30 12:12:18,592 - DEBUG	- check_conditionals - Calling check_conditionals(['(', 'S', '^', '(', 'R', '^', 'Q', ')', ')'], ['S', 'R', 'Q'])...
2023-08-30 12:12:18,592 - INFO	- check_conditionals - PASS: Any conditional symbols present, are in the desired form.
2023-08-30 12:12:18,592 - DEBUG	- create_conditionals - Creating one-piece conditionals from single elements.
2023-08-30 12:12:18,592 - DEBUG	- create_conditionals - Searching for a '-' in array_of_elements=['(', 'S', '^', '(', 'R', '^', 'Q', ')', ')']
2023-08-30 12:12:18,592 - DEBUG	- create_conditionals - Search for conditionals finished and none were found, returning.
2023-08-30 12:12:18,592 - DEBUG	- analyze_statement - In analyze_statement(): 
len(variables_arr)=3, 
variables_arr=['S', 'R', 'Q'], 
array_of_elements=['(', 'S', '^', '(', 'R', '^', 'Q', ')', ')']
2023-08-30 12:12:18,592 - DEBUG	- print_details - Printing details...
2023-08-30 12:12:18,592 - INFO	- print_details - ************************** ANALYSIS **************************
2023-08-30 12:12:18,592 - INFO	- print_details - -> Number of Variables: 	3
2023-08-30 12:12:18,592 - INFO	- print_details - -> Variables: 	['S', 'R', 'Q']
2023-08-30 12:12:18,592 - INFO	- print_details - -> Array of Elements: 	['(', 'S', '^', '(', 'R', '^', 'Q', ')', ')']
2023-08-30 12:12:18,592 - INFO	- print_details - ************************** ANALYSIS **************************
2023-08-30 12:12:18,592 - INFO	- analyze_statement - Analyzing concluded.
2023-08-30 12:12:18,592 - INFO	- parse_array - Starting to parse array...
2023-08-30 12:12:18,593 - DEBUG	- remove_brackets_around_variables - Removing brackets around standalone variables...
2023-08-30 12:12:18,593 - DEBUG	- remove_brackets_around_variables - arr=['(', 'S', '^', '(', 'R', '^', 'Q', ')', ')']
2023-08-30 12:12:18,593 - DEBUG	- remove_brackets_around_variables - Finished removing all brackets around variables.
2023-08-30 12:12:18,593 - DEBUG	- parse_array - In parse_array(): elements_second=['(', 'S', '^', '(', 'R', '^', 'Q', ')', ')']
2023-08-30 12:12:18,593 - DEBUG	- add_brackets_around_unary_connectives - Adding brackets around unary connectives...
2023-08-30 12:12:18,593 - DEBUG	- add_brackets_around_unary_connectives - arr=['(', 'S', '^', '(', 'R', '^', 'Q', ')', ')']
2023-08-30 12:12:18,593 - DEBUG	- add_brackets_around_unary_connectives - Finished adding brackets around all unary connectives.
2023-08-30 12:12:18,593 - DEBUG	- parse_array - In parse_array(): elements_second=['(', 'S', '^', '(', 'R', '^', 'Q', ')', ')']
2023-08-30 12:12:18,593 - INFO	- parse_array - Final checks are ran before parsing concludes.
2023-08-30 12:12:18,593 - DEBUG	- check_left_and_right_brackets - Calling check_left_and_right_brackets(['(', 'S', '^', '(', 'R', '^', 'Q', ')', ')'])...
2023-08-30 12:12:18,593 - INFO	- check_left_and_right_brackets - PASS: The number of left and right brackets are equal.
2023-08-30 12:12:18,593 - DEBUG	- parse - Calling parse(['(', 'S', '^', '(', 'R', '^', 'Q', ')', ')'])...
2023-08-30 12:12:18,593 - DEBUG	- remove_outer_brackets - Calling remove_outer_brackets(['(', 'S', '^', '(', 'R', '^', 'Q', ')', ')'])...
2023-08-30 12:12:18,593 - DEBUG	- remove_outer_brackets - array=['S', '^', '(', 'R', '^', 'Q', ')']
2023-08-30 12:12:18,593 - DEBUG	- remove_outer_brackets - Finished removing outer brackets.
2023-08-30 12:12:18,593 - DEBUG	- parse - In parse(): arr=['S', '^', '(', 'R', '^', 'Q', ')']
2023-08-30 12:12:18,593 - DEBUG	- find_connective - Calling find_connectives(['S', '^', '(', 'R', '^', 'Q', ')'])...
2023-08-30 12:12:18,593 - DEBUG	- find_connective - In find_connective(): elem=^, i=1
2023-08-30 12:12:18,593 - DEBUG	- find_connective - Found connective.
2023-08-30 12:12:18,593 - DEBUG	- parse - Calling parse(['(', 'R', '^', 'Q', ')'])...
2023-08-30 12:12:18,594 - DEBUG	- remove_outer_brackets - Calling remove_outer_brackets(['(', 'R', '^', 'Q', ')'])...
2023-08-30 12:12:18,594 - DEBUG	- remove_outer_brackets - array=['R', '^', 'Q']
2023-08-30 12:12:18,594 - DEBUG	- remove_outer_brackets - Finished removing outer brackets.
2023-08-30 12:12:18,594 - DEBUG	- parse - In parse(): arr=['R', '^', 'Q']
2023-08-30 12:12:18,594 - DEBUG	- find_connective - Calling find_connectives(['R', '^', 'Q'])...
2023-08-30 12:12:18,594 - DEBUG	- find_connective - In find_connective(): elem=^, i=1
2023-08-30 12:12:18,594 - DEBUG	- find_connective - Found connective.
2023-08-30 12:12:18,594 - DEBUG	- parse - temp_array=[['R'], '^', ['Q']]
2023-08-30 12:12:18,594 - DEBUG	- parse - Returning with parsed list for binary connectives.
2023-08-30 12:12:18,594 - DEBUG	- parse - temp_array=[['S'], '^', [['R'], '^', ['Q']]]
2023-08-30 12:12:18,594 - DEBUG	- parse - Returning with parsed list for binary connectives.
2023-08-30 12:12:18,594 - DEBUG	- parse_array - tree_structured_array=[['S'], '^', [['R'], '^', ['Q']]]
2023-08-30 12:12:18,594 - DEBUG	- print_details - Printing details...
2023-08-30 12:12:18,594 - INFO	- print_details - *************************** PARSE ***************************
2023-08-30 12:12:18,594 - INFO	- print_details - -> Parsed Array: 	[['S'], '^', [['R'], '^', ['Q']]]
2023-08-30 12:12:18,594 - INFO	- print_details - *************************** PARSE ***************************
2023-08-30 12:12:18,594 - INFO	- parse_array - Finished parsing array.
2023-08-30 12:12:18,594 - DEBUG	- user_input - In user_input(): 
number_of_variables=3, 
variables_as_array=['S', 'R', 'Q'], 
statement=(S ^ (R ^ Q)), 
new_elements=[['S'], '^', [['R'], '^', ['Q']]].
2023-08-30 12:12:18,594 - INFO	- user_input - Gathered all information needed including variables and parsed array.
2023-08-30 12:12:18,594 - DEBUG	- simulate_main - In simulate_main(): 
number_of_variables=3, 
variables_as_array=['S', 'R', 'Q'], 
provided_statement=(S ^ (R ^ Q)), 
elements_in_tree=[['S'], '^', [['R'], '^', ['Q']]]
2023-08-30 12:12:18,595 - DEBUG	- print_details - Printing details...
2023-08-30 12:12:18,595 - INFO	- print_details - ************************** SUMMARY **************************
2023-08-30 12:12:18,595 - INFO	- print_details - -> number_of_variables: 	3
2023-08-30 12:12:18,595 - INFO	- print_details - -> variables_as_array: 	['S', 'R', 'Q']
2023-08-30 12:12:18,595 - INFO	- print_details - -> provided_statement: 	(S ^ (R ^ Q))
2023-08-30 12:12:18,595 - INFO	- print_details - -> elements_in_tree: 	[['S'], '^', [['R'], '^', ['Q']]]
2023-08-30 12:12:18,595 - INFO	- print_details - ************************** SUMMARY **************************
2023-08-30 12:12:18,595 - INFO	- evaluate_array_as_tree - Starting evaluation of array of elements...
2023-08-30 12:12:18,595 - DEBUG	- create_matrix - Creating initial matrix...
2023-08-30 12:12:18,595 - DEBUG	- recursive_table - Creating table entries recursively...
2023-08-30 12:12:18,595 - DEBUG	- recursive_table - n=3
2023-08-30 12:12:18,595 - DEBUG	- recursive_table - Creating table entries recursively...
2023-08-30 12:12:18,595 - DEBUG	- recursive_table - n=2
2023-08-30 12:12:18,595 - DEBUG	- recursive_table - Creating table entries recursively...
2023-08-30 12:12:18,595 - DEBUG	- recursive_table - n=1
2023-08-30 12:12:18,595 - DEBUG	- recursive_table - array_table=['T', 'F']
2023-08-30 12:12:18,595 - DEBUG	- recursive_table - Finished creating array of table entries.
2023-08-30 12:12:18,595 - DEBUG	- recursive_table - array_table=['TT', 'TF', 'FT', 'FF']
2023-08-30 12:12:18,595 - DEBUG	- recursive_table - Finished creating array of table entries.
2023-08-30 12:12:18,595 - DEBUG	- recursive_table - array_table=['TTT', 'TTF', 'TFT', 'TFF', 'FTT', 'FTF', 'FFT', 'FFF']
2023-08-30 12:12:18,595 - DEBUG	- recursive_table - Finished creating array of table entries.
2023-08-30 12:12:18,595 - DEBUG	- create_matrix - In create_matrix(): new_matrix=[['T', 'T', 'T'], ['T', 'T', 'F'], ['T', 'F', 'T'], ['T', 'F', 'F'], ['F', 'T', 'T'], ['F', 'T', 'F'], ['F', 'F', 'T'], ['F', 'F', 'F']]
2023-08-30 12:12:18,596 - INFO	- create_matrix - Finished creating the initial 'truth' matrix.
2023-08-30 12:12:18,596 - INFO	- create_matrix - *** Initial Matrix:	[['T', 'T', 'T'], ['T', 'T', 'F'], ['T', 'F', 'T'], ['T', 'F', 'F'], ['F', 'T', 'T'], ['F', 'T', 'F'], ['F', 'F', 'T'], ['F', 'F', 'F']] ***
2023-08-30 12:12:18,596 - DEBUG	- evaluate_array_as_tree - In evaluate_array_as_tree(): 
elements_in_tree=[['S'], '^', [['R'], '^', ['Q']]], 
counter=0, 
matrix=[['T', 'T', 'T'], ['T', 'T', 'F'], ['T', 'F', 'T'], ['T', 'F', 'F'], ['F', 'T', 'T'], ['F', 'T', 'F'], ['F', 'F', 'T'], ['F', 'F', 'F']], 
variables_as_array=['S', 'R', 'Q']
2023-08-30 12:12:18,596 - DEBUG	- evaluate_array - Calling evaluate_array([['S'], '^', [['R'], '^', ['Q']]], 0, [['T', 'T', 'T'], ['T', 'T', 'F'], ['T', 'F', 'T'], ['T', 'F', 'F'], ['F', 'T', 'T'], ['F', 'T', 'F'], ['F', 'F', 'T'], ['F', 'F', 'F']], ['S', 'R', 'Q'])...
2023-08-30 12:12:18,596 - DEBUG	- evaluate_array - Calling evaluate_array([['R'], '^', ['Q']], 1, [['T', 'T', 'T'], ['T', 'T', 'F'], ['T', 'F', 'T'], ['T', 'F', 'F'], ['F', 'T', 'T'], ['F', 'T', 'F'], ['F', 'F', 'T'], ['F', 'F', 'F']], ['S', 'R', 'Q'])...
2023-08-30 12:12:18,596 - DEBUG	- switch_case - Entering switch_case(^, ['T', 'T', 'F', 'F', 'T', 'T', 'F', 'F'], ['T', 'F', 'T', 'F', 'T', 'F', 'T', 'F'])...
2023-08-30 12:12:18,596 - DEBUG	- conj - In conj. case...
2023-08-30 12:12:18,596 - DEBUG	- conjunction - Calling conjunction(['T', 'T', 'F', 'F', 'T', 'T', 'F', 'F'], ['T', 'F', 'T', 'F', 'T', 'F', 'T', 'F'])...
2023-08-30 12:12:18,596 - DEBUG	- conjunction - new_row_values=['T', 'F', 'F', 'F', 'T', 'F', 'F', 'F']
2023-08-30 12:12:18,596 - DEBUG	- conjunction - Returning with new row values.
2023-08-30 12:12:18,596 - DEBUG	- set_new_array_elem - Calling set_new_array_elem([['R'], '^', ['Q']])...
2023-08-30 12:12:18,596 - DEBUG	- set_new_array_elem - new_array=['R^Q']
2023-08-30 12:12:18,596 - DEBUG	- set_new_array_elem - Finished setting new array element.
2023-08-30 12:12:18,596 - DEBUG	- evaluate_array - In evaluate_array(): 
returned_array=['T', 'F', 'F', 'F', 'T', 'F', 'F', 'F'], 
final_variable_combined=['R^Q'], 
matrix=[['T', 'T', 'T'], ['T', 'T', 'F'], ['T', 'F', 'T'], ['T', 'F', 'F'], ['F', 'T', 'T'], ['F', 'T', 'F'], ['F', 'F', 'T'], ['F', 'F', 'F']], 
variables=['S', 'R', 'Q']
2023-08-30 12:12:18,596 - DEBUG	- evaluate_array - Evaluation of array in evaluate_array() is done.
2023-08-30 12:12:18,596 - DEBUG	- add_array_to_matrix - Calling add_array_to_matrix([['T', 'T', 'T'], ['T', 'T', 'F'], ['T', 'F', 'T'], ['T', 'F', 'F'], ['F', 'T', 'T'], ['F', 'T', 'F'], ['F', 'F', 'T'], ['F', 'F', 'F']], ['T', 'F', 'F', 'F', 'T', 'F', 'F', 'F'], ['S', 'R', 'Q'], ['R^Q'])...
2023-08-30 12:12:18,596 - DEBUG	- add_array_to_matrix - variables=['S', 'R', 'Q', 'R^Q']
2023-08-30 12:12:18,596 - DEBUG	- add_array_to_matrix - Added array to matrix.
2023-08-30 12:12:18,597 - DEBUG	- switch_case - Entering switch_case(^, ['T', 'T', 'T', 'T', 'F', 'F', 'F', 'F'], ['T', 'F', 'F', 'F', 'T', 'F', 'F', 'F'])...
2023-08-30 12:12:18,597 - DEBUG	- conj - In conj. case...
2023-08-30 12:12:18,597 - DEBUG	- conjunction - Calling conjunction(['T', 'T', 'T', 'T', 'F', 'F', 'F', 'F'], ['T', 'F', 'F', 'F', 'T', 'F', 'F', 'F'])...
2023-08-30 12:12:18,597 - DEBUG	- conjunction - new_row_values=['T', 'F', 'F', 'F', 'F', 'F', 'F', 'F']
2023-08-30 12:12:18,597 - DEBUG	- conjunction - Returning with new row values.
2023-08-30 12:12:18,597 - DEBUG	- set_new_array_elem - Calling set_new_array_elem([['S'], '^', ['R^Q']])...
2023-08-30 12:12:18,597 - DEBUG	- set_new_array_elem - new_array=['S^(R^Q)']
2023-08-30 12:12:18,597 - DEBUG	- set_new_array_elem - Finished setting new array element.
2023-08-30 12:12:18,597 - DEBUG	- evaluate_array - In evaluate_array(): 
returned_array=['T', 'F', 'F', 'F', 'F', 'F', 'F', 'F'], 
final_variable_combined=['S^(R^Q)'], 
matrix=[['T', 'T', 'T', 'T', 'T'], ['T', 'T', 'F', 'F', 'F'], ['T', 'F', 'T', 'F', 'F'], ['T', 'F', 'F', 'F', 'F'], ['F', 'T', 'T', 'T', 'F'], ['F', 'T', 'F', 'F', 'F'], ['F', 'F', 'T', 'F', 'F'], ['F', 'F', 'F', 'F', 'F']], 
variables=['S', 'R', 'Q', 'R^Q']
2023-08-30 12:12:18,597 - DEBUG	- evaluate_array - Evaluation of array in evaluate_array() is done.
2023-08-30 12:12:18,597 - DEBUG	- evaluate_array_as_tree - returned_array=['T', 'F', 'F', 'F', 'F', 'F', 'F', 'F'], returned_matrix=[['T', 'T', 'T', 'T', 'T'], ['T', 'T', 'F', 'F', 'F'], ['T', 'F', 'T', 'F', 'F'], ['T', 'F', 'F', 'F', 'F'], ['F', 'T', 'T', 'T', 'F'], ['F', 'T', 'F', 'F', 'F'], ['F', 'F', 'T', 'F', 'F'], ['F', 'F', 'F', 'F', 'F']], all_variables=['S', 'R', 'Q', 'R^Q', 'S^(R^Q)']
2023-08-30 12:12:18,597 - DEBUG	- evaluate_array_as_tree - Finished evaluating array.
2023-08-30 12:12:18,597 - DEBUG	- simulate_main - In simulate_main(): 
final_value_array=['T', 'F', 'F', 'F', 'F', 'F', 'F', 'F'], 
returned_matrix=[['T', 'T', 'T', 'T', 'T'], ['T', 'T', 'F', 'F', 'F'], ['T', 'F', 'T', 'F', 'F'], ['T', 'F', 'F', 'F', 'F'], ['F', 'T', 'T', 'T', 'F'], ['F', 'T', 'F', 'F', 'F'], ['F', 'F', 'T', 'F', 'F'], ['F', 'F', 'F', 'F', 'F']], 
all_variables=['S', 'R', 'Q', 'R^Q', 'S^(R^Q)']
2023-08-30 12:12:18,598 - DEBUG	- print_details - Printing details...
2023-08-30 12:12:18,598 - INFO	- print_details - ************************** EVALUATE **************************
2023-08-30 12:12:18,598 - INFO	- print_details - -> Statement: 	(S ^ (R ^ Q))
2023-08-30 12:12:18,598 - INFO	- print_details - -> Final Calculated Array: 	['T', 'F', 'F', 'F', 'F', 'F', 'F', 'F']
2023-08-30 12:12:18,598 - INFO	- print_details - -> All Variables: 	['S', 'R', 'Q', 'R^Q', 'S^(R^Q)']
2023-08-30 12:12:18,598 - INFO	- print_details - -> Final Matrix: 	[['T', 'T', 'T', 'T', 'T'], ['T', 'T', 'F', 'F', 'F'], ['T', 'F', 'T', 'F', 'F'], ['T', 'F', 'F', 'F', 'F'], ['F', 'T', 'T', 'T', 'F'], ['F', 'T', 'F', 'F', 'F'], ['F', 'F', 'T', 'F', 'F'], ['F', 'F', 'F', 'F', 'F']]
2023-08-30 12:12:18,598 - INFO	- print_details - ************************** EVALUATE **************************
2023-08-30 12:12:18,598 - INFO	- simulate_main - Finished evaluating statement.
2023-08-30 12:12:18,598 - DEBUG	- display_matrix - Displaying matrix to console...
2023-08-30 12:12:18,598 - DEBUG	- get_number_of_spaces - Calling get_number_of_spaces(3, 1, ['S', 'R', 'Q', 'R^Q', 'S^(R^Q)'])...
2023-08-30 12:12:18,598 - DEBUG	- get_number_of_spaces - total_space=30
2023-08-30 12:12:18,598 - DEBUG	- get_number_of_spaces - Finished calculating the total space.
2023-08-30 12:12:18,598 - DEBUG	- simulate_main - Returning from simulate_main()...
2023-08-30 12:12:18,598 - INFO	- simulate_main - Statement:	(P v Q)
2023-08-30 12:12:18,598 - INFO	- simulate_main - Before proceeding, doing checks for unequal brackets and illegal characters.
2023-08-30 12:12:18,599 - DEBUG	- check_left_and_right_brackets - Calling check_left_and_right_brackets((P v Q))...
2023-08-30 12:12:18,599 - INFO	- check_left_and_right_brackets - PASS: The number of left and right brackets are equal.
2023-08-30 12:12:18,599 - DEBUG	- check_for_illegal_characters - Calling check_for_illegal_characters((P v Q))
2023-08-30 12:12:18,599 - DEBUG	- check_for_illegal_characters - ******************** starting input validation *******************
2023-08-30 12:12:18,599 - DEBUG	- validate_input - Calling validate_input(P)...
2023-08-30 12:12:18,599 - DEBUG	- validate_input - Checked against a regex. result(is it valid?)=True.
2023-08-30 12:12:18,599 - DEBUG	- validate_input - Calling validate_input(v)...
2023-08-30 12:12:18,599 - DEBUG	- validate_input - Checked against a regex. result(is it valid?)=True.
2023-08-30 12:12:18,599 - DEBUG	- validate_input - Calling validate_input(Q)...
2023-08-30 12:12:18,599 - DEBUG	- validate_input - Checked against a regex. result(is it valid?)=True.
2023-08-30 12:12:18,599 - DEBUG	- check_for_illegal_characters - ******************** finished input validation *******************
2023-08-30 12:12:18,599 - INFO	- check_for_illegal_characters - PASS: There were no illegal characters found.
2023-08-30 12:12:18,599 - INFO	- simulate_main - All checks are valid, proceeding with extracting information from statement.
2023-08-30 12:12:18,599 - INFO	- user_input - Processing statement...
2023-08-30 12:12:18,599 - DEBUG	- user_input - statement=(P v Q)
2023-08-30 12:12:18,599 - INFO	- analyze_statement - Starting to analyze statement...
2023-08-30 12:12:18,599 - INFO	- analyze_statement - The statement is sanitized from any whitespaces.
2023-08-30 12:12:18,599 - DEBUG	- analyze_statement - All whitespaces need to be removed, proceeding.
2023-08-30 12:12:18,599 - DEBUG	- clean_whitespaces - Calling clean_whitespaces((P v Q))...
2023-08-30 12:12:18,599 - DEBUG	- clean_whitespaces - Finished removing whitespaces: statement=(PvQ)
2023-08-30 12:12:18,600 - DEBUG	- analyze_statement - Finished removing any whitespaces found in statement. Proceeding with finding variables.
2023-08-30 12:12:18,600 - INFO	- find_variables - Finding variables in statement...
2023-08-30 12:12:18,600 - DEBUG	- find_variables - statement=(PvQ)
2023-08-30 12:12:18,600 - DEBUG	- find_variables - variables_array=['P', 'Q']
2023-08-30 12:12:18,600 - INFO	- find_variables - Found all variables in statement.
2023-08-30 12:12:18,600 - INFO	- find_variables - *** Variables:	['P', 'Q'] ***
2023-08-30 12:12:18,600 - DEBUG	- analyze_statement - variables_arr=['P', 'Q']
2023-08-30 12:12:18,600 - INFO	- analyze_statement - The statement is converted to an array and any conditionals are sanitized.
2023-08-30 12:12:18,600 - DEBUG	- create_array_of_elements - Creating an array from a string...
2023-08-30 12:12:18,600 - DEBUG	- create_array_of_elements - Calling create_array_of_elements((PvQ))
2023-08-30 12:12:18,600 - DEBUG	- create_array_of_elements - array_of_elements=['(', 'P', 'v', 'Q', ')']
2023-08-30 12:12:18,600 - DEBUG	- create_array_of_elements - Finished creating array.
2023-08-30 12:12:18,600 - DEBUG	- check_conditionals - Calling check_conditionals(['(', 'P', 'v', 'Q', ')'], ['P', 'Q'])...
2023-08-30 12:12:18,600 - INFO	- check_conditionals - PASS: Any conditional symbols present, are in the desired form.
2023-08-30 12:12:18,600 - DEBUG	- create_conditionals - Creating one-piece conditionals from single elements.
2023-08-30 12:12:18,600 - DEBUG	- create_conditionals - Searching for a '-' in array_of_elements=['(', 'P', 'v', 'Q', ')']
2023-08-30 12:12:18,600 - DEBUG	- create_conditionals - Search for conditionals finished and none were found, returning.
2023-08-30 12:12:18,600 - DEBUG	- analyze_statement - In analyze_statement(): 
len(variables_arr)=2, 
variables_arr=['P', 'Q'], 
array_of_elements=['(', 'P', 'v', 'Q', ')']
2023-08-30 12:12:18,600 - DEBUG	- print_details - Printing details...
2023-08-30 12:12:18,600 - INFO	- print_details - ************************** ANALYSIS **************************
2023-08-30 12:12:18,600 - INFO	- print_details - -> Number of Variables: 	2
2023-08-30 12:12:18,601 - INFO	- print_details - -> Variables: 	['P', 'Q']
2023-08-30 12:12:18,601 - INFO	- print_details - -> Array of Elements: 	['(', 'P', 'v', 'Q', ')']
2023-08-30 12:12:18,601 - INFO	- print_details - ************************** ANALYSIS **************************
2023-08-30 12:12:18,601 - INFO	- analyze_statement - Analyzing concluded.
2023-08-30 12:12:18,601 - INFO	- parse_array - Starting to parse array...
2023-08-30 12:12:18,601 - DEBUG	- remove_brackets_around_variables - Removing brackets around standalone variables...
2023-08-30 12:12:18,601 - DEBUG	- remove_brackets_around_variables - arr=['(', 'P', 'v', 'Q', ')']
2023-08-30 12:12:18,601 - DEBUG	- remove_brackets_around_variables - Finished removing all brackets around variables.
2023-08-30 12:12:18,601 - DEBUG	- parse_array - In parse_array(): elements_second=['(', 'P', 'v', 'Q', ')']
2023-08-30 12:12:18,601 - DEBUG	- add_brackets_around_unary_connectives - Adding brackets around unary connectives...
2023-08-30 12:12:18,601 - DEBUG	- add_brackets_around_unary_connectives - arr=['(', 'P', 'v', 'Q', ')']
2023-08-30 12:12:18,601 - DEBUG	- add_brackets_around_unary_connectives - Finished adding brackets around all unary connectives.
2023-08-30 12:12:18,601 - DEBUG	- parse_array - In parse_array(): elements_second=['(', 'P', 'v', 'Q', ')']
2023-08-30 12:12:18,601 - INFO	- parse_array - Final checks are ran before parsing concludes.
2023-08-30 12:12:18,601 - DEBUG	- check_left_and_right_brackets - Calling check_left_and_right_brackets(['(', 'P', 'v', 'Q', ')'])...
2023-08-30 12:12:18,601 - INFO	- check_left_and_right_brackets - PASS: The number of left and right brackets are equal.
2023-08-30 12:12:18,601 - DEBUG	- parse - Calling parse(['(', 'P', 'v', 'Q', ')'])...
2023-08-30 12:12:18,601 - DEBUG	- remove_outer_brackets - Calling remove_outer_brackets(['(', 'P', 'v', 'Q', ')'])...
2023-08-30 12:12:18,601 - DEBUG	- remove_outer_brackets - array=['P', 'v', 'Q']
2023-08-30 12:12:18,601 - DEBUG	- remove_outer_brackets - Finished removing outer brackets.
2023-08-30 12:12:18,602 - DEBUG	- parse - In parse(): arr=['P', 'v', 'Q']
2023-08-30 12:12:18,602 - DEBUG	- find_connective - Calling find_connectives(['P', 'v', 'Q'])...
2023-08-30 12:12:18,602 - DEBUG	- find_connective - In find_connective(): elem=v, i=1
2023-08-30 12:12:18,602 - DEBUG	- find_connective - Found connective.
2023-08-30 12:12:18,602 - DEBUG	- parse - temp_array=[['P'], 'v', ['Q']]
2023-08-30 12:12:18,602 - DEBUG	- parse - Returning with parsed list for binary connectives.
2023-08-30 12:12:18,602 - DEBUG	- parse_array - tree_structured_array=[['P'], 'v', ['Q']]
2023-08-30 12:12:18,602 - DEBUG	- print_details - Printing details...
2023-08-30 12:12:18,602 - INFO	- print_details - *************************** PARSE ***************************
2023-08-30 12:12:18,602 - INFO	- print_details - -> Parsed Array: 	[['P'], 'v', ['Q']]
2023-08-30 12:12:18,602 - INFO	- print_details - *************************** PARSE ***************************
2023-08-30 12:12:18,602 - INFO	- parse_array - Finished parsing array.
2023-08-30 12:12:18,602 - DEBUG	- user_input - In user_input(): 
number_of_variables=2, 
variables_as_array=['P', 'Q'], 
statement=(P v Q), 
new_elements=[['P'], 'v', ['Q']].
2023-08-30 12:12:18,602 - INFO	- user_input - Gathered all information needed including variables and parsed array.
2023-08-30 12:12:18,602 - DEBUG	- simulate_main - In simulate_main(): 
number_of_variables=2, 
variables_as_array=['P', 'Q'], 
provided_statement=(P v Q), 
elements_in_tree=[['P'], 'v', ['Q']]
2023-08-30 12:12:18,602 - DEBUG	- print_details - Printing details...
2023-08-30 12:12:18,602 - INFO	- print_details - ************************** SUMMARY **************************
2023-08-30 12:12:18,602 - INFO	- print_details - -> number_of_variables: 	2
2023-08-30 12:12:18,602 - INFO	- print_details - -> variables_as_array: 	['P', 'Q']
2023-08-30 12:12:18,602 - INFO	- print_details - -> provided_statement: 	(P v Q)
2023-08-30 12:12:18,602 - INFO	- print_details - -> elements_in_tree: 	[['P'], 'v', ['Q']]
2023-08-30 12:12:18,602 - INFO	- print_details - ************************** SUMMARY **************************
2023-08-30 12:12:18,602 - INFO	- evaluate_array_as_tree - Starting evaluation of array of elements...
2023-08-30 12:12:18,602 - DEBUG	- create_matrix - Creating initial matrix...
2023-08-30 12:12:18,602 - DEBUG	- recursive_table - Creating table entries recursively...
2023-08-30 12:12:18,602 - DEBUG	- recursive_table - n=2
2023-08-30 12:12:18,602 - DEBUG	- recursive_table - Creating table entries recursively...
2023-08-30 12:12:18,602 - DEBUG	- recursive_table - n=1
2023-08-30 12:12:18,602 - DEBUG	- recursive_table - array_table=['T', 'F']
2023-08-30 12:12:18,602 - DEBUG	- recursive_table - Finished creating array of table entries.
2023-08-30 12:12:18,602 - DEBUG	- recursive_table - array_table=['TT', 'TF', 'FT', 'FF']
2023-08-30 12:12:18,603 - DEBUG	- recursive_table - Finished creating array of table entries.
2023-08-30 12:12:18,603 - DEBUG	- create_matrix - In create_matrix(): new_matrix=[['T', 'T'], ['T', 'F'], ['F', 'T'], ['F', 'F']]
2023-08-30 12:12:18,603 - INFO	- create_matrix - Finished creating the initial 'truth' matrix.
2023-08-30 12:12:18,603 - INFO	- create_matrix - *** Initial Matrix:	[['T', 'T'], ['T', 'F'], ['F', 'T'], ['F', 'F']] ***
2023-08-30 12:12:18,603 - DEBUG	- evaluate_array_as_tree - In evaluate_array_as_tree(): 
elements_in_tree=[['P'], 'v', ['Q']], 
counter=0, 
matrix=[['T', 'T'], ['T', 'F'], ['F', 'T'], ['F', 'F']], 
variables_as_array=['P', 'Q']
2023-08-30 12:12:18,603 - DEBUG	- evaluate_array - Calling evaluate_array([['P'], 'v', ['Q']], 0, [['T', 'T'], ['T', 'F'], ['F', 'T'], ['F', 'F']], ['P', 'Q'])...
2023-08-30 12:12:18,603 - DEBUG	- switch_case - Entering switch_case(v, ['T', 'T', 'F', 'F'], ['T', 'F', 'T', 'F'])...
2023-08-30 12:12:18,603 - DEBUG	- disj - In disj. case...
2023-08-30 12:12:18,604 - DEBUG	- disjunction - Calling disjunction(['T', 'T', 'F', 'F'], ['T', 'F', 'T', 'F'])...
2023-08-30 12:12:18,604 - DEBUG	- disjunction - new_row_values=['T', 'T', 'T', 'F']
2023-08-30 12:12:18,604 - DEBUG	- disjunction - Returning with new row values.
2023-08-30 12:12:18,604 - DEBUG	- set_new_array_elem - Calling set_new_array_elem([['P'], 'v', ['Q']])...
2023-08-30 12:12:18,604 - DEBUG	- set_new_array_elem - new_array=['PvQ']
2023-08-30 12:12:18,604 - DEBUG	- set_new_array_elem - Finished setting new array element.
2023-08-30 12:12:18,604 - DEBUG	- evaluate_array - In evaluate_array(): 
returned_array=['T', 'T', 'T', 'F'], 
final_variable_combined=['PvQ'], 
matrix=[['T', 'T', 'T'], ['T', 'F', 'T'], ['F', 'T', 'T'], ['F', 'F', 'F']], 
variables=['P', 'Q']
2023-08-30 12:12:18,604 - DEBUG	- evaluate_array - Evaluation of array in evaluate_array() is done.
2023-08-30 12:12:18,604 - DEBUG	- evaluate_array_as_tree - returned_array=['T', 'T', 'T', 'F'], returned_matrix=[['T', 'T', 'T'], ['T', 'F', 'T'], ['F', 'T', 'T'], ['F', 'F', 'F']], all_variables=['P', 'Q', 'PvQ']
2023-08-30 12:12:18,604 - DEBUG	- evaluate_array_as_tree - Finished evaluating array.
2023-08-30 12:12:18,604 - DEBUG	- simulate_main - In simulate_main(): 
final_value_array=['T', 'T', 'T', 'F'], 
returned_matrix=[['T', 'T', 'T'], ['T', 'F', 'T'], ['F', 'T', 'T'], ['F', 'F', 'F']], 
all_variables=['P', 'Q', 'PvQ']
2023-08-30 12:12:18,604 - DEBUG	- print_details - Printing details...
2023-08-30 12:12:18,604 - INFO	- print_details - ************************** EVALUATE **************************
2023-08-30 12:12:18,604 - INFO	- print_details - -> Statement: 	(P v Q)
2023-08-30 12:12:18,604 - INFO	- print_details - -> Final Calculated Array: 	['T', 'T', 'T', 'F']
2023-08-30 12:12:18,604 - INFO	- print_details - -> All Variables: 	['P', 'Q', 'PvQ']
2023-08-30 12:12:18,604 - INFO	- print_details - -> Final Matrix: 	[['T', 'T', 'T'], ['T', 'F', 'T'], ['F', 'T', 'T'], ['F', 'F', 'F']]
2023-08-30 12:12:18,604 - INFO	- print_details - ************************** EVALUATE **************************
2023-08-30 12:12:18,604 - INFO	- simulate_main - Finished evaluating statement.
2023-08-30 12:12:18,604 - DEBUG	- display_matrix - Displaying matrix to console...
2023-08-30 12:12:18,605 - DEBUG	- get_number_of_spaces - Calling get_number_of_spaces(2, 0, ['P', 'Q', 'PvQ'])...
2023-08-30 12:12:18,605 - DEBUG	- get_number_of_spaces - total_space=16
2023-08-30 12:12:18,605 - DEBUG	- get_number_of_spaces - Finished calculating the total space.
2023-08-30 12:12:18,605 - DEBUG	- simulate_main - Returning from simulate_main()...
2023-08-30 12:12:18,605 - INFO	- simulate_main - Statement:	(P -> (Q ^ R))
2023-08-30 12:12:18,605 - INFO	- simulate_main - Before proceeding, doing checks for unequal brackets and illegal characters.
2023-08-30 12:12:18,605 - DEBUG	- check_left_and_right_brackets - Calling check_left_and_right_brackets((P -> (Q ^ R)))...
2023-08-30 12:12:18,605 - INFO	- check_left_and_right_brackets - PASS: The number of left and right brackets are equal.
2023-08-30 12:12:18,605 - DEBUG	- check_for_illegal_characters - Calling check_for_illegal_characters((P -> (Q ^ R)))
2023-08-30 12:12:18,605 - DEBUG	- check_for_illegal_characters - ******************** starting input validation *******************
2023-08-30 12:12:18,605 - DEBUG	- validate_input - Calling validate_input(P)...
2023-08-30 12:12:18,605 - DEBUG	- validate_input - Checked against a regex. result(is it valid?)=True.
2023-08-30 12:12:18,605 - DEBUG	- validate_input - Calling validate_input(-)...
2023-08-30 12:12:18,605 - DEBUG	- validate_input - Checked against a regex. result(is it valid?)=True.
2023-08-30 12:12:18,605 - DEBUG	- validate_input - Calling validate_input(>)...
2023-08-30 12:12:18,605 - DEBUG	- validate_input - Checked against a regex. result(is it valid?)=True.
2023-08-30 12:12:18,605 - DEBUG	- validate_input - Calling validate_input(Q)...
2023-08-30 12:12:18,605 - DEBUG	- validate_input - Checked against a regex. result(is it valid?)=True.
2023-08-30 12:12:18,606 - DEBUG	- validate_input - Calling validate_input(^)...
2023-08-30 12:12:18,606 - DEBUG	- validate_input - Checked against a regex. result(is it valid?)=True.
2023-08-30 12:12:18,606 - DEBUG	- validate_input - Calling validate_input(R)...
2023-08-30 12:12:18,606 - DEBUG	- validate_input - Checked against a regex. result(is it valid?)=True.
2023-08-30 12:12:18,606 - DEBUG	- check_for_illegal_characters - ******************** finished input validation *******************
2023-08-30 12:12:18,606 - INFO	- check_for_illegal_characters - PASS: There were no illegal characters found.
2023-08-30 12:12:18,606 - INFO	- simulate_main - All checks are valid, proceeding with extracting information from statement.
2023-08-30 12:12:18,606 - INFO	- user_input - Processing statement...
2023-08-30 12:12:18,606 - DEBUG	- user_input - statement=(P -> (Q ^ R))
2023-08-30 12:12:18,606 - INFO	- analyze_statement - Starting to analyze statement...
2023-08-30 12:12:18,606 - INFO	- analyze_statement - The statement is sanitized from any whitespaces.
2023-08-30 12:12:18,606 - DEBUG	- analyze_statement - All whitespaces need to be removed, proceeding.
2023-08-30 12:12:18,606 - DEBUG	- clean_whitespaces - Calling clean_whitespaces((P -> (Q ^ R)))...
2023-08-30 12:12:18,606 - DEBUG	- clean_whitespaces - Finished removing whitespaces: statement=(P->(Q^R))
2023-08-30 12:12:18,606 - DEBUG	- analyze_statement - Finished removing any whitespaces found in statement. Proceeding with finding variables.
2023-08-30 12:12:18,606 - INFO	- find_variables - Finding variables in statement...
2023-08-30 12:12:18,606 - DEBUG	- find_variables - statement=(P->(Q^R))
2023-08-30 12:12:18,606 - DEBUG	- find_variables - variables_array=['P', 'Q', 'R']
2023-08-30 12:12:18,606 - INFO	- find_variables - Found all variables in statement.
2023-08-30 12:12:18,606 - INFO	- find_variables - *** Variables:	['P', 'Q', 'R'] ***
2023-08-30 12:12:18,607 - DEBUG	- analyze_statement - variables_arr=['P', 'Q', 'R']
2023-08-30 12:12:18,607 - INFO	- analyze_statement - The statement is converted to an array and any conditionals are sanitized.
2023-08-30 12:12:18,607 - DEBUG	- create_array_of_elements - Creating an array from a string...
2023-08-30 12:12:18,607 - DEBUG	- create_array_of_elements - Calling create_array_of_elements((P->(Q^R)))
2023-08-30 12:12:18,607 - DEBUG	- create_array_of_elements - array_of_elements=['(', 'P', '-', '>', '(', 'Q', '^', 'R', ')', ')']
2023-08-30 12:12:18,607 - DEBUG	- create_array_of_elements - Finished creating array.
2023-08-30 12:12:18,607 - DEBUG	- check_conditionals - Calling check_conditionals(['(', 'P', '-', '>', '(', 'Q', '^', 'R', ')', ')'], ['P', 'Q', 'R'])...
2023-08-30 12:12:18,607 - INFO	- check_conditionals - PASS: Any conditional symbols present, are in the desired form.
2023-08-30 12:12:18,607 - DEBUG	- create_conditionals - Creating one-piece conditionals from single elements.
2023-08-30 12:12:18,607 - DEBUG	- create_conditionals - Searching for a '-' in array_of_elements=['(', 'P', '-', '>', '(', 'Q', '^', 'R', ')', ')']
2023-08-30 12:12:18,607 - DEBUG	- create_conditionals - Conditional symbols were found in ['(', 'P', '-', '>', '(', 'Q', '^', 'R', ')', ')']
2023-08-30 12:12:18,607 - DEBUG	- create_conditionals - array_of_elements=['(', 'P', '->', '(', 'Q', '^', 'R', ')', ')']
2023-08-30 12:12:18,607 - DEBUG	- create_conditionals - Finished creating conditionals.
2023-08-30 12:12:18,607 - DEBUG	- analyze_statement - In analyze_statement(): 
len(variables_arr)=3, 
variables_arr=['P', 'Q', 'R'], 
array_of_elements=['(', 'P', '->', '(', 'Q', '^', 'R', ')', ')']
2023-08-30 12:12:18,607 - DEBUG	- print_details - Printing details...
2023-08-30 12:12:18,607 - INFO	- print_details - ************************** ANALYSIS **************************
2023-08-30 12:12:18,607 - INFO	- print_details - -> Number of Variables: 	3
2023-08-30 12:12:18,607 - INFO	- print_details - -> Variables: 	['P', 'Q', 'R']
2023-08-30 12:12:18,607 - INFO	- print_details - -> Array of Elements: 	['(', 'P', '->', '(', 'Q', '^', 'R', ')', ')']
2023-08-30 12:12:18,607 - INFO	- print_details - ************************** ANALYSIS **************************
2023-08-30 12:12:18,608 - INFO	- analyze_statement - Analyzing concluded.
2023-08-30 12:12:18,608 - INFO	- parse_array - Starting to parse array...
2023-08-30 12:12:18,608 - DEBUG	- remove_brackets_around_variables - Removing brackets around standalone variables...
2023-08-30 12:12:18,608 - DEBUG	- remove_brackets_around_variables - arr=['(', 'P', '->', '(', 'Q', '^', 'R', ')', ')']
2023-08-30 12:12:18,608 - DEBUG	- remove_brackets_around_variables - Finished removing all brackets around variables.
2023-08-30 12:12:18,608 - DEBUG	- parse_array - In parse_array(): elements_second=['(', 'P', '->', '(', 'Q', '^', 'R', ')', ')']
2023-08-30 12:12:18,608 - DEBUG	- add_brackets_around_unary_connectives - Adding brackets around unary connectives...
2023-08-30 12:12:18,608 - DEBUG	- add_brackets_around_unary_connectives - arr=['(', 'P', '->', '(', 'Q', '^', 'R', ')', ')']
2023-08-30 12:12:18,608 - DEBUG	- add_brackets_around_unary_connectives - Finished adding brackets around all unary connectives.
2023-08-30 12:12:18,608 - DEBUG	- parse_array - In parse_array(): elements_second=['(', 'P', '->', '(', 'Q', '^', 'R', ')', ')']
2023-08-30 12:12:18,608 - INFO	- parse_array - Final checks are ran before parsing concludes.
2023-08-30 12:12:18,608 - DEBUG	- check_left_and_right_brackets - Calling check_left_and_right_brackets(['(', 'P', '->', '(', 'Q', '^', 'R', ')', ')'])...
2023-08-30 12:12:18,608 - INFO	- check_left_and_right_brackets - PASS: The number of left and right brackets are equal.
2023-08-30 12:12:18,608 - DEBUG	- parse - Calling parse(['(', 'P', '->', '(', 'Q', '^', 'R', ')', ')'])...
2023-08-30 12:12:18,608 - DEBUG	- remove_outer_brackets - Calling remove_outer_brackets(['(', 'P', '->', '(', 'Q', '^', 'R', ')', ')'])...
2023-08-30 12:12:18,608 - DEBUG	- remove_outer_brackets - array=['P', '->', '(', 'Q', '^', 'R', ')']
2023-08-30 12:12:18,608 - DEBUG	- remove_outer_brackets - Finished removing outer brackets.
2023-08-30 12:12:18,608 - DEBUG	- parse - In parse(): arr=['P', '->', '(', 'Q', '^', 'R', ')']
2023-08-30 12:12:18,608 - DEBUG	- find_connective - Calling find_connectives(['P', '->', '(', 'Q', '^', 'R', ')'])...
2023-08-30 12:12:18,608 - DEBUG	- find_connective - In find_connective(): elem=->, i=1
2023-08-30 12:12:18,608 - DEBUG	- find_connective - Found connective.
2023-08-30 12:12:18,609 - DEBUG	- parse - Calling parse(['(', 'Q', '^', 'R', ')'])...
2023-08-30 12:12:18,609 - DEBUG	- remove_outer_brackets - Calling remove_outer_brackets(['(', 'Q', '^', 'R', ')'])...
2023-08-30 12:12:18,609 - DEBUG	- remove_outer_brackets - array=['Q', '^', 'R']
2023-08-30 12:12:18,609 - DEBUG	- remove_outer_brackets - Finished removing outer brackets.
2023-08-30 12:12:18,609 - DEBUG	- parse - In parse(): arr=['Q', '^', 'R']
2023-08-30 12:12:18,609 - DEBUG	- find_connective - Calling find_connectives(['Q', '^', 'R'])...
2023-08-30 12:12:18,609 - DEBUG	- find_connective - In find_connective(): elem=^, i=1
2023-08-30 12:12:18,609 - DEBUG	- find_connective - Found connective.
2023-08-30 12:12:18,609 - DEBUG	- parse - temp_array=[['Q'], '^', ['R']]
2023-08-30 12:12:18,609 - DEBUG	- parse - Returning with parsed list for binary connectives.
2023-08-30 12:12:18,609 - DEBUG	- parse - temp_array=[['P'], '->', [['Q'], '^', ['R']]]
2023-08-30 12:12:18,609 - DEBUG	- parse - Returning with parsed list for binary connectives.
2023-08-30 12:12:18,609 - DEBUG	- parse_array - tree_structured_array=[['P'], '->', [['Q'], '^', ['R']]]
2023-08-30 12:12:18,609 - DEBUG	- print_details - Printing details...
2023-08-30 12:12:18,609 - INFO	- print_details - *************************** PARSE ***************************
2023-08-30 12:12:18,609 - INFO	- print_details - -> Parsed Array: 	[['P'], '->', [['Q'], '^', ['R']]]
2023-08-30 12:12:18,609 - INFO	- print_details - *************************** PARSE ***************************
2023-08-30 12:12:18,609 - INFO	- parse_array - Finished parsing array.
2023-08-30 12:12:18,609 - DEBUG	- user_input - In user_input(): 
number_of_variables=3, 
variables_as_array=['P', 'Q', 'R'], 
statement=(P -> (Q ^ R)), 
new_elements=[['P'], '->', [['Q'], '^', ['R']]].
2023-08-30 12:12:18,609 - INFO	- user_input - Gathered all information needed including variables and parsed array.
2023-08-30 12:12:18,609 - DEBUG	- simulate_main - In simulate_main(): 
number_of_variables=3, 
variables_as_array=['P', 'Q', 'R'], 
provided_statement=(P -> (Q ^ R)), 
elements_in_tree=[['P'], '->', [['Q'], '^', ['R']]]
2023-08-30 12:12:18,610 - DEBUG	- print_details - Printing details...
2023-08-30 12:12:18,610 - INFO	- print_details - ************************** SUMMARY **************************
2023-08-30 12:12:18,610 - INFO	- print_details - -> number_of_variables: 	3
2023-08-30 12:12:18,610 - INFO	- print_details - -> variables_as_array: 	['P', 'Q', 'R']
2023-08-30 12:12:18,610 - INFO	- print_details - -> provided_statement: 	(P -> (Q ^ R))
2023-08-30 12:12:18,610 - INFO	- print_details - -> elements_in_tree: 	[['P'], '->', [['Q'], '^', ['R']]]
2023-08-30 12:12:18,610 - INFO	- print_details - ************************** SUMMARY **************************
2023-08-30 12:12:18,610 - INFO	- evaluate_array_as_tree - Starting evaluation of array of elements...
2023-08-30 12:12:18,610 - DEBUG	- create_matrix - Creating initial matrix...
2023-08-30 12:12:18,610 - DEBUG	- recursive_table - Creating table entries recursively...
2023-08-30 12:12:18,610 - DEBUG	- recursive_table - n=3
2023-08-30 12:12:18,610 - DEBUG	- recursive_table - Creating table entries recursively...
2023-08-30 12:12:18,610 - DEBUG	- recursive_table - n=2
2023-08-30 12:12:18,610 - DEBUG	- recursive_table - Creating table entries recursively...
2023-08-30 12:12:18,610 - DEBUG	- recursive_table - n=1
2023-08-30 12:12:18,610 - DEBUG	- recursive_table - array_table=['T', 'F']
2023-08-30 12:12:18,610 - DEBUG	- recursive_table - Finished creating array of table entries.
2023-08-30 12:12:18,610 - DEBUG	- recursive_table - array_table=['TT', 'TF', 'FT', 'FF']
2023-08-30 12:12:18,610 - DEBUG	- recursive_table - Finished creating array of table entries.
2023-08-30 12:12:18,610 - DEBUG	- recursive_table - array_table=['TTT', 'TTF', 'TFT', 'TFF', 'FTT', 'FTF', 'FFT', 'FFF']
2023-08-30 12:12:18,610 - DEBUG	- recursive_table - Finished creating array of table entries.
2023-08-30 12:12:18,611 - DEBUG	- create_matrix - In create_matrix(): new_matrix=[['T', 'T', 'T'], ['T', 'T', 'F'], ['T', 'F', 'T'], ['T', 'F', 'F'], ['F', 'T', 'T'], ['F', 'T', 'F'], ['F', 'F', 'T'], ['F', 'F', 'F']]
2023-08-30 12:12:18,611 - INFO	- create_matrix - Finished creating the initial 'truth' matrix.
2023-08-30 12:12:18,611 - INFO	- create_matrix - *** Initial Matrix:	[['T', 'T', 'T'], ['T', 'T', 'F'], ['T', 'F', 'T'], ['T', 'F', 'F'], ['F', 'T', 'T'], ['F', 'T', 'F'], ['F', 'F', 'T'], ['F', 'F', 'F']] ***
2023-08-30 12:12:18,611 - DEBUG	- evaluate_array_as_tree - In evaluate_array_as_tree(): 
elements_in_tree=[['P'], '->', [['Q'], '^', ['R']]], 
counter=0, 
matrix=[['T', 'T', 'T'], ['T', 'T', 'F'], ['T', 'F', 'T'], ['T', 'F', 'F'], ['F', 'T', 'T'], ['F', 'T', 'F'], ['F', 'F', 'T'], ['F', 'F', 'F']], 
variables_as_array=['P', 'Q', 'R']
2023-08-30 12:12:18,611 - DEBUG	- evaluate_array - Calling evaluate_array([['P'], '->', [['Q'], '^', ['R']]], 0, [['T', 'T', 'T'], ['T', 'T', 'F'], ['T', 'F', 'T'], ['T', 'F', 'F'], ['F', 'T', 'T'], ['F', 'T', 'F'], ['F', 'F', 'T'], ['F', 'F', 'F']], ['P', 'Q', 'R'])...
2023-08-30 12:12:18,611 - DEBUG	- evaluate_array - Calling evaluate_array([['Q'], '^', ['R']], 1, [['T', 'T', 'T'], ['T', 'T', 'F'], ['T', 'F', 'T'], ['T', 'F', 'F'], ['F', 'T', 'T'], ['F', 'T', 'F'], ['F', 'F', 'T'], ['F', 'F', 'F']], ['P', 'Q', 'R'])...
2023-08-30 12:12:18,611 - DEBUG	- switch_case - Entering switch_case(^, ['T', 'T', 'F', 'F', 'T', 'T', 'F', 'F'], ['T', 'F', 'T', 'F', 'T', 'F', 'T', 'F'])...
2023-08-30 12:12:18,611 - DEBUG	- conj - In conj. case...
2023-08-30 12:12:18,611 - DEBUG	- conjunction - Calling conjunction(['T', 'T', 'F', 'F', 'T', 'T', 'F', 'F'], ['T', 'F', 'T', 'F', 'T', 'F', 'T', 'F'])...
2023-08-30 12:12:18,611 - DEBUG	- conjunction - new_row_values=['T', 'F', 'F', 'F', 'T', 'F', 'F', 'F']
2023-08-30 12:12:18,611 - DEBUG	- conjunction - Returning with new row values.
2023-08-30 12:12:18,611 - DEBUG	- set_new_array_elem - Calling set_new_array_elem([['Q'], '^', ['R']])...
2023-08-30 12:12:18,611 - DEBUG	- set_new_array_elem - new_array=['Q^R']
2023-08-30 12:12:18,611 - DEBUG	- set_new_array_elem - Finished setting new array element.
2023-08-30 12:12:18,611 - DEBUG	- evaluate_array - In evaluate_array(): 
returned_array=['T', 'F', 'F', 'F', 'T', 'F', 'F', 'F'], 
final_variable_combined=['Q^R'], 
matrix=[['T', 'T', 'T'], ['T', 'T', 'F'], ['T', 'F', 'T'], ['T', 'F', 'F'], ['F', 'T', 'T'], ['F', 'T', 'F'], ['F', 'F', 'T'], ['F', 'F', 'F']], 
variables=['P', 'Q', 'R']
2023-08-30 12:12:18,611 - DEBUG	- evaluate_array - Evaluation of array in evaluate_array() is done.
2023-08-30 12:12:18,611 - DEBUG	- add_array_to_matrix - Calling add_array_to_matrix([['T', 'T', 'T'], ['T', 'T', 'F'], ['T', 'F', 'T'], ['T', 'F', 'F'], ['F', 'T', 'T'], ['F', 'T', 'F'], ['F', 'F', 'T'], ['F', 'F', 'F']], ['T', 'F', 'F', 'F', 'T', 'F', 'F', 'F'], ['P', 'Q', 'R'], ['Q^R'])...
2023-08-30 12:12:18,612 - DEBUG	- add_array_to_matrix - variables=['P', 'Q', 'R', 'Q^R']
2023-08-30 12:12:18,612 - DEBUG	- add_array_to_matrix - Added array to matrix.
2023-08-30 12:12:18,612 - DEBUG	- switch_case - Entering switch_case(->, ['T', 'T', 'T', 'T', 'F', 'F', 'F', 'F'], ['T', 'F', 'F', 'F', 'T', 'F', 'F', 'F'])...
2023-08-30 12:12:18,612 - DEBUG	- cond - In cond. case...
2023-08-30 12:12:18,612 - DEBUG	- conditional - Calling conditional(['T', 'T', 'T', 'T', 'F', 'F', 'F', 'F'], ['T', 'F', 'F', 'F', 'T', 'F', 'F', 'F'])...
2023-08-30 12:12:18,612 - DEBUG	- conditional - new_row_values=['T', 'F', 'F', 'F', 'T', 'T', 'T', 'T']
2023-08-30 12:12:18,612 - DEBUG	- conditional - Returning with new row values.
2023-08-30 12:12:18,612 - DEBUG	- set_new_array_elem - Calling set_new_array_elem([['P'], '->', ['Q^R']])...
2023-08-30 12:12:18,612 - DEBUG	- set_new_array_elem - new_array=['P->(Q^R)']
2023-08-30 12:12:18,612 - DEBUG	- set_new_array_elem - Finished setting new array element.
2023-08-30 12:12:18,612 - DEBUG	- evaluate_array - In evaluate_array(): 
returned_array=['T', 'F', 'F', 'F', 'T', 'T', 'T', 'T'], 
final_variable_combined=['P->(Q^R)'], 
matrix=[['T', 'T', 'T', 'T', 'T'], ['T', 'T', 'F', 'F', 'F'], ['T', 'F', 'T', 'F', 'F'], ['T', 'F', 'F', 'F', 'F'], ['F', 'T', 'T', 'T', 'T'], ['F', 'T', 'F', 'F', 'T'], ['F', 'F', 'T', 'F', 'T'], ['F', 'F', 'F', 'F', 'T']], 
variables=['P', 'Q', 'R', 'Q^R']
2023-08-30 12:12:18,612 - DEBUG	- evaluate_array - Evaluation of array in evaluate_array() is done.
2023-08-30 12:12:18,612 - DEBUG	- evaluate_array_as_tree - returned_array=['T', 'F', 'F', 'F', 'T', 'T', 'T', 'T'], returned_matrix=[['T', 'T', 'T', 'T', 'T'], ['T', 'T', 'F', 'F', 'F'], ['T', 'F', 'T', 'F', 'F'], ['T', 'F', 'F', 'F', 'F'], ['F', 'T', 'T', 'T', 'T'], ['F', 'T', 'F', 'F', 'T'], ['F', 'F', 'T', 'F', 'T'], ['F', 'F', 'F', 'F', 'T']], all_variables=['P', 'Q', 'R', 'Q^R', 'P->(Q^R)']
2023-08-30 12:12:18,612 - DEBUG	- evaluate_array_as_tree - Finished evaluating array.
2023-08-30 12:12:18,612 - DEBUG	- simulate_main - In simulate_main(): 
final_value_array=['T', 'F', 'F', 'F', 'T', 'T', 'T', 'T'], 
returned_matrix=[['T', 'T', 'T', 'T', 'T'], ['T', 'T', 'F', 'F', 'F'], ['T', 'F', 'T', 'F', 'F'], ['T', 'F', 'F', 'F', 'F'], ['F', 'T', 'T', 'T', 'T'], ['F', 'T', 'F', 'F', 'T'], ['F', 'F', 'T', 'F', 'T'], ['F', 'F', 'F', 'F', 'T']], 
all_variables=['P', 'Q', 'R', 'Q^R', 'P->(Q^R)']
2023-08-30 12:12:18,612 - DEBUG	- print_details - Printing details...
2023-08-30 12:12:18,612 - INFO	- print_details - ************************** EVALUATE **************************
2023-08-30 12:12:18,612 - INFO	- print_details - -> Statement: 	(P -> (Q ^ R))
2023-08-30 12:12:18,612 - INFO	- print_details - -> Final Calculated Array: 	['T', 'F', 'F', 'F', 'T', 'T', 'T', 'T']
2023-08-30 12:12:18,612 - INFO	- print_details - -> All Variables: 	['P', 'Q', 'R', 'Q^R', 'P->(Q^R)']
2023-08-30 12:12:18,613 - INFO	- print_details - -> Final Matrix: 	[['T', 'T', 'T', 'T', 'T'], ['T', 'T', 'F', 'F', 'F'], ['T', 'F', 'T', 'F', 'F'], ['T', 'F', 'F', 'F', 'F'], ['F', 'T', 'T', 'T', 'T'], ['F', 'T', 'F', 'F', 'T'], ['F', 'F', 'T', 'F', 'T'], ['F', 'F', 'F', 'F', 'T']]
2023-08-30 12:12:18,613 - INFO	- print_details - ************************** EVALUATE **************************
2023-08-30 12:12:18,613 - INFO	- simulate_main - Finished evaluating statement.
2023-08-30 12:12:18,613 - DEBUG	- display_matrix - Displaying matrix to console...
2023-08-30 12:12:18,613 - DEBUG	- get_number_of_spaces - Calling get_number_of_spaces(3, 1, ['P', 'Q', 'R', 'Q^R', 'P->(Q^R)'])...
2023-08-30 12:12:18,613 - DEBUG	- get_number_of_spaces - total_space=31
2023-08-30 12:12:18,613 - DEBUG	- get_number_of_spaces - Finished calculating the total space.
2023-08-30 12:12:18,613 - DEBUG	- simulate_main - Returning from simulate_main()...
2023-08-30 12:12:18,613 - INFO	- simulate_main - Statement:	((P -> Q) <-> ((!Q) -> (!P)))
2023-08-30 12:12:18,613 - INFO	- simulate_main - Before proceeding, doing checks for unequal brackets and illegal characters.
2023-08-30 12:12:18,613 - DEBUG	- check_left_and_right_brackets - Calling check_left_and_right_brackets(((P -> Q) <-> ((!Q) -> (!P))))...
2023-08-30 12:12:18,613 - INFO	- check_left_and_right_brackets - PASS: The number of left and right brackets are equal.
2023-08-30 12:12:18,613 - DEBUG	- check_for_illegal_characters - Calling check_for_illegal_characters(((P -> Q) <-> ((!Q) -> (!P))))
2023-08-30 12:12:18,613 - DEBUG	- check_for_illegal_characters - ******************** starting input validation *******************
2023-08-30 12:12:18,613 - DEBUG	- validate_input - Calling validate_input(P)...
2023-08-30 12:12:18,613 - DEBUG	- validate_input - Checked against a regex. result(is it valid?)=True.
2023-08-30 12:12:18,613 - DEBUG	- validate_input - Calling validate_input(-)...
2023-08-30 12:12:18,613 - DEBUG	- validate_input - Checked against a regex. result(is it valid?)=True.
2023-08-30 12:12:18,614 - DEBUG	- validate_input - Calling validate_input(>)...
2023-08-30 12:12:18,614 - DEBUG	- validate_input - Checked against a regex. result(is it valid?)=True.
2023-08-30 12:12:18,614 - DEBUG	- validate_input - Calling validate_input(Q)...
2023-08-30 12:12:18,614 - DEBUG	- validate_input - Checked against a regex. result(is it valid?)=True.
2023-08-30 12:12:18,614 - DEBUG	- validate_input - Calling validate_input(<)...
2023-08-30 12:12:18,614 - DEBUG	- validate_input - Checked against a regex. result(is it valid?)=True.
2023-08-30 12:12:18,614 - DEBUG	- validate_input - Calling validate_input(-)...
2023-08-30 12:12:18,614 - DEBUG	- validate_input - Checked against a regex. result(is it valid?)=True.
2023-08-30 12:12:18,614 - DEBUG	- validate_input - Calling validate_input(>)...
2023-08-30 12:12:18,614 - DEBUG	- validate_input - Checked against a regex. result(is it valid?)=True.
2023-08-30 12:12:18,614 - DEBUG	- validate_input - Calling validate_input(!)...
2023-08-30 12:12:18,614 - DEBUG	- validate_input - Checked against a regex. result(is it valid?)=True.
2023-08-30 12:12:18,614 - DEBUG	- validate_input - Calling validate_input(Q)...
2023-08-30 12:12:18,614 - DEBUG	- validate_input - Checked against a regex. result(is it valid?)=True.
2023-08-30 12:12:18,614 - DEBUG	- validate_input - Calling validate_input(-)...
2023-08-30 12:12:18,614 - DEBUG	- validate_input - Checked against a regex. result(is it valid?)=True.
2023-08-30 12:12:18,614 - DEBUG	- validate_input - Calling validate_input(>)...
2023-08-30 12:12:18,614 - DEBUG	- validate_input - Checked against a regex. result(is it valid?)=True.
2023-08-30 12:12:18,614 - DEBUG	- validate_input - Calling validate_input(!)...
2023-08-30 12:12:18,615 - DEBUG	- validate_input - Checked against a regex. result(is it valid?)=True.
2023-08-30 12:12:18,615 - DEBUG	- validate_input - Calling validate_input(P)...
2023-08-30 12:12:18,615 - DEBUG	- validate_input - Checked against a regex. result(is it valid?)=True.
2023-08-30 12:12:18,615 - DEBUG	- check_for_illegal_characters - ******************** finished input validation *******************
2023-08-30 12:12:18,615 - INFO	- check_for_illegal_characters - PASS: There were no illegal characters found.
2023-08-30 12:12:18,615 - INFO	- simulate_main - All checks are valid, proceeding with extracting information from statement.
2023-08-30 12:12:18,615 - INFO	- user_input - Processing statement...
2023-08-30 12:12:18,615 - DEBUG	- user_input - statement=((P -> Q) <-> ((!Q) -> (!P)))
2023-08-30 12:12:18,615 - INFO	- analyze_statement - Starting to analyze statement...
2023-08-30 12:12:18,615 - INFO	- analyze_statement - The statement is sanitized from any whitespaces.
2023-08-30 12:12:18,615 - DEBUG	- analyze_statement - All whitespaces need to be removed, proceeding.
2023-08-30 12:12:18,615 - DEBUG	- clean_whitespaces - Calling clean_whitespaces(((P -> Q) <-> ((!Q) -> (!P))))...
2023-08-30 12:12:18,615 - DEBUG	- clean_whitespaces - Finished removing whitespaces: statement=((P->Q)<->((!Q)->(!P)))
2023-08-30 12:12:18,615 - DEBUG	- analyze_statement - Finished removing any whitespaces found in statement. Proceeding with finding variables.
2023-08-30 12:12:18,615 - INFO	- find_variables - Finding variables in statement...
2023-08-30 12:12:18,615 - DEBUG	- find_variables - statement=((P->Q)<->((!Q)->(!P)))
2023-08-30 12:12:18,615 - DEBUG	- find_variables - variables_array=['P', 'Q']
2023-08-30 12:12:18,615 - INFO	- find_variables - Found all variables in statement.
2023-08-30 12:12:18,615 - INFO	- find_variables - *** Variables:	['P', 'Q'] ***
2023-08-30 12:12:18,615 - DEBUG	- analyze_statement - variables_arr=['P', 'Q']
2023-08-30 12:12:18,615 - INFO	- analyze_statement - The statement is converted to an array and any conditionals are sanitized.
2023-08-30 12:12:18,615 - DEBUG	- create_array_of_elements - Creating an array from a string...
2023-08-30 12:12:18,616 - DEBUG	- create_array_of_elements - Calling create_array_of_elements(((P->Q)<->((!Q)->(!P))))
2023-08-30 12:12:18,616 - DEBUG	- create_array_of_elements - array_of_elements=['(', '(', 'P', '-', '>', 'Q', ')', '<', '-', '>', '(', '(', '!', 'Q', ')', '-', '>', '(', '!', 'P', ')', ')', ')']
2023-08-30 12:12:18,616 - DEBUG	- create_array_of_elements - Finished creating array.
2023-08-30 12:12:18,616 - DEBUG	- check_conditionals - Calling check_conditionals(['(', '(', 'P', '-', '>', 'Q', ')', '<', '-', '>', '(', '(', '!', 'Q', ')', '-', '>', '(', '!', 'P', ')', ')', ')'], ['P', 'Q'])...
2023-08-30 12:12:18,616 - INFO	- check_conditionals - PASS: Any conditional symbols present, are in the desired form.
2023-08-30 12:12:18,616 - DEBUG	- create_conditionals - Creating one-piece conditionals from single elements.
2023-08-30 12:12:18,616 - DEBUG	- create_conditionals - Searching for a '-' in array_of_elements=['(', '(', 'P', '-', '>', 'Q', ')', '<', '-', '>', '(', '(', '!', 'Q', ')', '-', '>', '(', '!', 'P', ')', ')', ')']
2023-08-30 12:12:18,616 - DEBUG	- create_conditionals - Conditional symbols were found in ['(', '(', 'P', '-', '>', 'Q', ')', '<', '-', '>', '(', '(', '!', 'Q', ')', '-', '>', '(', '!', 'P', ')', ')', ')']
2023-08-30 12:12:18,616 - DEBUG	- create_conditionals - array_of_elements=['(', '(', 'P', '->', 'Q', ')', '<->', '(', '(', '!', 'Q', ')', '->', '(', '!', 'P', ')', ')', ')']
2023-08-30 12:12:18,616 - DEBUG	- create_conditionals - Finished creating conditionals.
2023-08-30 12:12:18,616 - DEBUG	- analyze_statement - In analyze_statement(): 
len(variables_arr)=2, 
variables_arr=['P', 'Q'], 
array_of_elements=['(', '(', 'P', '->', 'Q', ')', '<->', '(', '(', '!', 'Q', ')', '->', '(', '!', 'P', ')', ')', ')']
2023-08-30 12:12:18,616 - DEBUG	- print_details - Printing details...
2023-08-30 12:12:18,616 - INFO	- print_details - ************************** ANALYSIS **************************
2023-08-30 12:12:18,616 - INFO	- print_details - -> Number of Variables: 	2
2023-08-30 12:12:18,616 - INFO	- print_details - -> Variables: 	['P', 'Q']
2023-08-30 12:12:18,616 - INFO	- print_details - -> Array of Elements: 	['(', '(', 'P', '->', 'Q', ')', '<->', '(', '(', '!', 'Q', ')', '->', '(', '!', 'P', ')', ')', ')']
2023-08-30 12:12:18,616 - INFO	- print_details - ************************** ANALYSIS **************************
2023-08-30 12:12:18,616 - INFO	- analyze_statement - Analyzing concluded.
2023-08-30 12:12:18,616 - INFO	- parse_array - Starting to parse array...
2023-08-30 12:12:18,616 - DEBUG	- remove_brackets_around_variables - Removing brackets around standalone variables...
2023-08-30 12:12:18,616 - DEBUG	- remove_brackets_around_variables - arr=['(', '(', 'P', '->', 'Q', ')', '<->', '(', '(', '!', 'Q', ')', '->', '(', '!', 'P', ')', ')', ')']
2023-08-30 12:12:18,617 - DEBUG	- remove_brackets_around_variables - Finished removing all brackets around variables.
2023-08-30 12:12:18,617 - DEBUG	- parse_array - In parse_array(): elements_second=['(', '(', 'P', '->', 'Q', ')', '<->', '(', '(', '!', 'Q', ')', '->', '(', '!', 'P', ')', ')', ')']
2023-08-30 12:12:18,617 - DEBUG	- add_brackets_around_unary_connectives - Adding brackets around unary connectives...
2023-08-30 12:12:18,617 - DEBUG	- add_brackets_around_unary_connectives - arr=['(', '(', 'P', '->', 'Q', ')', '<->', '(', '(', '!', 'Q', ')', '->', '(', '!', 'P', ')', ')', ')']
2023-08-30 12:12:18,617 - DEBUG	- add_brackets_around_unary_connectives - Finished adding brackets around all unary connectives.
2023-08-30 12:12:18,617 - DEBUG	- parse_array - In parse_array(): elements_second=['(', '(', 'P', '->', 'Q', ')', '<->', '(', '(', '!', 'Q', ')', '->', '(', '!', 'P', ')', ')', ')']
2023-08-30 12:12:18,617 - INFO	- parse_array - Final checks are ran before parsing concludes.
2023-08-30 12:12:18,617 - DEBUG	- check_left_and_right_brackets - Calling check_left_and_right_brackets(['(', '(', 'P', '->', 'Q', ')', '<->', '(', '(', '!', 'Q', ')', '->', '(', '!', 'P', ')', ')', ')'])...
2023-08-30 12:12:18,617 - INFO	- check_left_and_right_brackets - PASS: The number of left and right brackets are equal.
2023-08-30 12:12:18,617 - DEBUG	- parse - Calling parse(['(', '(', 'P', '->', 'Q', ')', '<->', '(', '(', '!', 'Q', ')', '->', '(', '!', 'P', ')', ')', ')'])...
2023-08-30 12:12:18,617 - DEBUG	- remove_outer_brackets - Calling remove_outer_brackets(['(', '(', 'P', '->', 'Q', ')', '<->', '(', '(', '!', 'Q', ')', '->', '(', '!', 'P', ')', ')', ')'])...
2023-08-30 12:12:18,617 - DEBUG	- remove_outer_brackets - array=['(', 'P', '->', 'Q', ')', '<->', '(', '(', '!', 'Q', ')', '->', '(', '!', 'P', ')', ')']
2023-08-30 12:12:18,617 - DEBUG	- remove_outer_brackets - Finished removing outer brackets.
2023-08-30 12:12:18,617 - DEBUG	- parse - In parse(): arr=['(', 'P', '->', 'Q', ')', '<->', '(', '(', '!', 'Q', ')', '->', '(', '!', 'P', ')', ')']
2023-08-30 12:12:18,617 - DEBUG	- find_connective - Calling find_connectives(['(', 'P', '->', 'Q', ')', '<->', '(', '(', '!', 'Q', ')', '->', '(', '!', 'P', ')', ')'])...
2023-08-30 12:12:18,617 - DEBUG	- find_connective - In find_connective(): elem=<->, i=5
2023-08-30 12:12:18,617 - DEBUG	- find_connective - Found connective.
2023-08-30 12:12:18,617 - DEBUG	- parse - Calling parse(['(', 'P', '->', 'Q', ')'])...
2023-08-30 12:12:18,617 - DEBUG	- remove_outer_brackets - Calling remove_outer_brackets(['(', 'P', '->', 'Q', ')'])...
2023-08-30 12:12:18,617 - DEBUG	- remove_outer_brackets - array=['P', '->', 'Q']
2023-08-30 12:12:18,617 - DEBUG	- remove_outer_brackets - Finished removing outer brackets.
2023-08-30 12:12:18,618 - DEBUG	- parse - In parse(): arr=['P', '->', 'Q']
2023-08-30 12:12:18,618 - DEBUG	- find_connective - Calling find_connectives(['P', '->', 'Q'])...
2023-08-30 12:12:18,618 - DEBUG	- find_connective - In find_connective(): elem=->, i=1
2023-08-30 12:12:18,618 - DEBUG	- find_connective - Found connective.
2023-08-30 12:12:18,618 - DEBUG	- parse - temp_array=[['P'], '->', ['Q']]
2023-08-30 12:12:18,618 - DEBUG	- parse - Returning with parsed list for binary connectives.
2023-08-30 12:12:18,618 - DEBUG	- parse - Calling parse(['(', '(', '!', 'Q', ')', '->', '(', '!', 'P', ')', ')'])...
2023-08-30 12:12:18,618 - DEBUG	- remove_outer_brackets - Calling remove_outer_brackets(['(', '(', '!', 'Q', ')', '->', '(', '!', 'P', ')', ')'])...
2023-08-30 12:12:18,618 - DEBUG	- remove_outer_brackets - array=['(', '!', 'Q', ')', '->', '(', '!', 'P', ')']
2023-08-30 12:12:18,618 - DEBUG	- remove_outer_brackets - Finished removing outer brackets.
2023-08-30 12:12:18,618 - DEBUG	- parse - In parse(): arr=['(', '!', 'Q', ')', '->', '(', '!', 'P', ')']
2023-08-30 12:12:18,618 - DEBUG	- find_connective - Calling find_connectives(['(', '!', 'Q', ')', '->', '(', '!', 'P', ')'])...
2023-08-30 12:12:18,618 - DEBUG	- find_connective - In find_connective(): elem=->, i=4
2023-08-30 12:12:18,618 - DEBUG	- find_connective - Found connective.
2023-08-30 12:12:18,618 - DEBUG	- parse - Calling parse(['(', '!', 'Q', ')'])...
2023-08-30 12:12:18,618 - DEBUG	- remove_outer_brackets - Calling remove_outer_brackets(['(', '!', 'Q', ')'])...
2023-08-30 12:12:18,618 - DEBUG	- remove_outer_brackets - array=['!', 'Q']
2023-08-30 12:12:18,618 - DEBUG	- remove_outer_brackets - Finished removing outer brackets.
2023-08-30 12:12:18,618 - DEBUG	- parse - In parse(): arr=['!', 'Q']
2023-08-30 12:12:18,618 - DEBUG	- parse - temp_arr=['!', 'Q']
2023-08-30 12:12:18,619 - DEBUG	- parse - Returning with parsed list of unary connectives.
2023-08-30 12:12:18,619 - DEBUG	- parse - Calling parse(['(', '!', 'P', ')'])...
2023-08-30 12:12:18,619 - DEBUG	- remove_outer_brackets - Calling remove_outer_brackets(['(', '!', 'P', ')'])...
2023-08-30 12:12:18,619 - DEBUG	- remove_outer_brackets - array=['!', 'P']
2023-08-30 12:12:18,619 - DEBUG	- remove_outer_brackets - Finished removing outer brackets.
2023-08-30 12:12:18,619 - DEBUG	- parse - In parse(): arr=['!', 'P']
2023-08-30 12:12:18,619 - DEBUG	- parse - temp_arr=['!', 'P']
2023-08-30 12:12:18,619 - DEBUG	- parse - Returning with parsed list of unary connectives.
2023-08-30 12:12:18,619 - DEBUG	- parse - temp_array=[['!', 'Q'], '->', ['!', 'P']]
2023-08-30 12:12:18,619 - DEBUG	- parse - Returning with parsed list for binary connectives.
2023-08-30 12:12:18,619 - DEBUG	- parse - temp_array=[[['P'], '->', ['Q']], '<->', [['!', 'Q'], '->', ['!', 'P']]]
2023-08-30 12:12:18,619 - DEBUG	- parse - Returning with parsed list for binary connectives.
2023-08-30 12:12:18,619 - DEBUG	- parse_array - tree_structured_array=[[['P'], '->', ['Q']], '<->', [['!', 'Q'], '->', ['!', 'P']]]
2023-08-30 12:12:18,619 - DEBUG	- print_details - Printing details...
2023-08-30 12:12:18,619 - INFO	- print_details - *************************** PARSE ***************************
2023-08-30 12:12:18,619 - INFO	- print_details - -> Parsed Array: 	[[['P'], '->', ['Q']], '<->', [['!', 'Q'], '->', ['!', 'P']]]
2023-08-30 12:12:18,619 - INFO	- print_details - *************************** PARSE ***************************
2023-08-30 12:12:18,619 - INFO	- parse_array - Finished parsing array.
2023-08-30 12:12:18,619 - DEBUG	- user_input - In user_input(): 
number_of_variables=2, 
variables_as_array=['P', 'Q'], 
statement=((P -> Q) <-> ((!Q) -> (!P))), 
new_elements=[[['P'], '->', ['Q']], '<->', [['!', 'Q'], '->', ['!', 'P']]].
2023-08-30 12:12:18,619 - INFO	- user_input - Gathered all information needed including variables and parsed array.
2023-08-30 12:12:18,619 - DEBUG	- simulate_main - In simulate_main(): 
number_of_variables=2, 
variables_as_array=['P', 'Q'], 
provided_statement=((P -> Q) <-> ((!Q) -> (!P))), 
elements_in_tree=[[['P'], '->', ['Q']], '<->', [['!', 'Q'], '->', ['!', 'P']]]
2023-08-30 12:12:18,619 - DEBUG	- print_details - Printing details...
2023-08-30 12:12:18,620 - INFO	- print_details - ************************** SUMMARY **************************
2023-08-30 12:12:18,620 - INFO	- print_details - -> number_of_variables: 	2
2023-08-30 12:12:18,620 - INFO	- print_details - -> variables_as_array: 	['P', 'Q']
2023-08-30 12:12:18,620 - INFO	- print_details - -> provided_statement: 	((P -> Q) <-> ((!Q) -> (!P)))
2023-08-30 12:12:18,620 - INFO	- print_details - -> elements_in_tree: 	[[['P'], '->', ['Q']], '<->', [['!', 'Q'], '->', ['!', 'P']]]
2023-08-30 12:12:18,620 - INFO	- print_details - ************************** SUMMARY **************************
2023-08-30 12:12:18,620 - INFO	- evaluate_array_as_tree - Starting evaluation of array of elements...
2023-08-30 12:12:18,620 - DEBUG	- create_matrix - Creating initial matrix...
2023-08-30 12:12:18,620 - DEBUG	- recursive_table - Creating table entries recursively...
2023-08-30 12:12:18,620 - DEBUG	- recursive_table - n=2
2023-08-30 12:12:18,620 - DEBUG	- recursive_table - Creating table entries recursively...
2023-08-30 12:12:18,620 - DEBUG	- recursive_table - n=1
2023-08-30 12:12:18,620 - DEBUG	- recursive_table - array_table=['T', 'F']
2023-08-30 12:12:18,620 - DEBUG	- recursive_table - Finished creating array of table entries.
2023-08-30 12:12:18,620 - DEBUG	- recursive_table - array_table=['TT', 'TF', 'FT', 'FF']
2023-08-30 12:12:18,620 - DEBUG	- recursive_table - Finished creating array of table entries.
2023-08-30 12:12:18,620 - DEBUG	- create_matrix - In create_matrix(): new_matrix=[['T', 'T'], ['T', 'F'], ['F', 'T'], ['F', 'F']]
2023-08-30 12:12:18,620 - INFO	- create_matrix - Finished creating the initial 'truth' matrix.
2023-08-30 12:12:18,620 - INFO	- create_matrix - *** Initial Matrix:	[['T', 'T'], ['T', 'F'], ['F', 'T'], ['F', 'F']] ***
2023-08-30 12:12:18,620 - DEBUG	- evaluate_array_as_tree - In evaluate_array_as_tree(): 
elements_in_tree=[[['P'], '->', ['Q']], '<->', [['!', 'Q'], '->', ['!', 'P']]], 
counter=0, 
matrix=[['T', 'T'], ['T', 'F'], ['F', 'T'], ['F', 'F']], 
variables_as_array=['P', 'Q']
2023-08-30 12:12:18,620 - DEBUG	- evaluate_array - Calling evaluate_array([[['P'], '->', ['Q']], '<->', [['!', 'Q'], '->', ['!', 'P']]], 0, [['T', 'T'], ['T', 'F'], ['F', 'T'], ['F', 'F']], ['P', 'Q'])...
2023-08-30 12:12:18,621 - DEBUG	- evaluate_array - Calling evaluate_array([['P'], '->', ['Q']], 1, [['T', 'T'], ['T', 'F'], ['F', 'T'], ['F', 'F']], ['P', 'Q'])...
2023-08-30 12:12:18,621 - DEBUG	- switch_case - Entering switch_case(->, ['T', 'T', 'F', 'F'], ['T', 'F', 'T', 'F'])...
2023-08-30 12:12:18,621 - DEBUG	- cond - In cond. case...
2023-08-30 12:12:18,621 - DEBUG	- conditional - Calling conditional(['T', 'T', 'F', 'F'], ['T', 'F', 'T', 'F'])...
2023-08-30 12:12:18,621 - DEBUG	- conditional - new_row_values=['T', 'F', 'T', 'T']
2023-08-30 12:12:18,621 - DEBUG	- conditional - Returning with new row values.
2023-08-30 12:12:18,621 - DEBUG	- set_new_array_elem - Calling set_new_array_elem([['P'], '->', ['Q']])...
2023-08-30 12:12:18,621 - DEBUG	- set_new_array_elem - new_array=['P->Q']
2023-08-30 12:12:18,621 - DEBUG	- set_new_array_elem - Finished setting new array element.
2023-08-30 12:12:18,621 - DEBUG	- evaluate_array - In evaluate_array(): 
returned_array=['T', 'F', 'T', 'T'], 
final_variable_combined=['P->Q'], 
matrix=[['T', 'T'], ['T', 'F'], ['F', 'T'], ['F', 'F']], 
variables=['P', 'Q']
2023-08-30 12:12:18,621 - DEBUG	- evaluate_array - Evaluation of array in evaluate_array() is done.
2023-08-30 12:12:18,621 - DEBUG	- add_array_to_matrix - Calling add_array_to_matrix([['T', 'T'], ['T', 'F'], ['F', 'T'], ['F', 'F']], ['T', 'F', 'T', 'T'], ['P', 'Q'], ['P->Q'])...
2023-08-30 12:12:18,621 - DEBUG	- add_array_to_matrix - variables=['P', 'Q', 'P->Q']
2023-08-30 12:12:18,621 - DEBUG	- add_array_to_matrix - Added array to matrix.
2023-08-30 12:12:18,621 - DEBUG	- evaluate_array - Calling evaluate_array([['!', 'Q'], '->', ['!', 'P']], 1, [['T', 'T', 'T'], ['T', 'F', 'F'], ['F', 'T', 'T'], ['F', 'F', 'T']], ['P', 'Q', 'P->Q'])...
2023-08-30 12:12:18,621 - DEBUG	- evaluate_array - Calling evaluate_array(['!', 'Q'], 2, [['T', 'T', 'T'], ['T', 'F', 'F'], ['F', 'T', 'T'], ['F', 'F', 'T']], ['P', 'Q', 'P->Q'])...
2023-08-30 12:12:18,621 - DEBUG	- switch_case - Entering switch_case(!, ['T', 'F', 'T', 'T'], ['T', 'F', 'T', 'F'])...
2023-08-30 12:12:18,621 - DEBUG	- neg - In neg. case...
2023-08-30 12:12:18,621 - DEBUG	- negation - Calling negation(['T', 'F', 'T', 'T'])...
2023-08-30 12:12:18,621 - DEBUG	- negation - new_row_values=['F', 'T', 'F', 'F']
2023-08-30 12:12:18,621 - DEBUG	- negation - Returning with new row values.
2023-08-30 12:12:18,622 - DEBUG	- set_new_array_elem - Calling set_new_array_elem(['_', '!', 'Q'])...
2023-08-30 12:12:18,622 - DEBUG	- set_new_array_elem - new_array=['!Q']
2023-08-30 12:12:18,622 - DEBUG	- set_new_array_elem - Finished setting new array element.
2023-08-30 12:12:18,622 - DEBUG	- evaluate_array - In evaluate_array(): 
returned_array=['F', 'T', 'F', 'F'], 
final_variable_combined=['!Q'], 
matrix=[['T', 'T', 'T'], ['T', 'F', 'F'], ['F', 'T', 'T'], ['F', 'F', 'T']], 
variables=['P', 'Q', 'P->Q']
2023-08-30 12:12:18,622 - DEBUG	- evaluate_array - Evaluation of array in evaluate_array() is done.
2023-08-30 12:12:18,622 - DEBUG	- add_array_to_matrix - Calling add_array_to_matrix([['T', 'T', 'T'], ['T', 'F', 'F'], ['F', 'T', 'T'], ['F', 'F', 'T']], ['F', 'T', 'F', 'F'], ['P', 'Q', 'P->Q'], ['!Q'])...
2023-08-30 12:12:18,622 - DEBUG	- add_array_to_matrix - variables=['P', 'Q', 'P->Q', '!Q']
2023-08-30 12:12:18,622 - DEBUG	- add_array_to_matrix - Added array to matrix.
2023-08-30 12:12:18,622 - DEBUG	- evaluate_array - Calling evaluate_array(['!', 'P'], 2, [['T', 'T', 'T', 'F'], ['T', 'F', 'F', 'T'], ['F', 'T', 'T', 'F'], ['F', 'F', 'T', 'F']], ['P', 'Q', 'P->Q', '!Q'])...
2023-08-30 12:12:18,622 - DEBUG	- switch_case - Entering switch_case(!, ['F', 'T', 'F', 'F'], ['T', 'T', 'F', 'F'])...
2023-08-30 12:12:18,622 - DEBUG	- neg - In neg. case...
2023-08-30 12:12:18,622 - DEBUG	- negation - Calling negation(['F', 'T', 'F', 'F'])...
2023-08-30 12:12:18,622 - DEBUG	- negation - new_row_values=['T', 'F', 'T', 'T']
2023-08-30 12:12:18,622 - DEBUG	- negation - Returning with new row values.
2023-08-30 12:12:18,622 - DEBUG	- set_new_array_elem - Calling set_new_array_elem(['_', '!', 'P'])...
2023-08-30 12:12:18,622 - DEBUG	- set_new_array_elem - new_array=['!P']
2023-08-30 12:12:18,622 - DEBUG	- set_new_array_elem - Finished setting new array element.
2023-08-30 12:12:18,622 - DEBUG	- evaluate_array - In evaluate_array(): 
returned_array=['T', 'F', 'T', 'T'], 
final_variable_combined=['!P'], 
matrix=[['T', 'T', 'T', 'F'], ['T', 'F', 'F', 'T'], ['F', 'T', 'T', 'F'], ['F', 'F', 'T', 'F']], 
variables=['P', 'Q', 'P->Q', '!Q']
2023-08-30 12:12:18,622 - DEBUG	- evaluate_array - Evaluation of array in evaluate_array() is done.
2023-08-30 12:12:18,622 - DEBUG	- add_array_to_matrix - Calling add_array_to_matrix([['T', 'T', 'T', 'F'], ['T', 'F', 'F', 'T'], ['F', 'T', 'T', 'F'], ['F', 'F', 'T', 'F']], ['T', 'F', 'T', 'T'], ['P', 'Q', 'P->Q', '!Q'], ['!P'])...
2023-08-30 12:12:18,623 - DEBUG	- add_array_to_matrix - variables=['P', 'Q', 'P->Q', '!Q', '!P']
2023-08-30 12:12:18,623 - DEBUG	- add_array_to_matrix - Added array to matrix.
2023-08-30 12:12:18,623 - DEBUG	- switch_case - Entering switch_case(->, ['F', 'T', 'F', 'F'], ['T', 'F', 'T', 'T'])...
2023-08-30 12:12:18,623 - DEBUG	- cond - In cond. case...
2023-08-30 12:12:18,623 - DEBUG	- conditional - Calling conditional(['F', 'T', 'F', 'F'], ['T', 'F', 'T', 'T'])...
2023-08-30 12:12:18,623 - DEBUG	- conditional - new_row_values=['T', 'F', 'T', 'T']
2023-08-30 12:12:18,623 - DEBUG	- conditional - Returning with new row values.
2023-08-30 12:12:18,623 - DEBUG	- set_new_array_elem - Calling set_new_array_elem([['!Q'], '->', ['!P']])...
2023-08-30 12:12:18,623 - DEBUG	- set_new_array_elem - new_array=['(!Q)->(!P)']
2023-08-30 12:12:18,623 - DEBUG	- set_new_array_elem - Finished setting new array element.
2023-08-30 12:12:18,623 - DEBUG	- evaluate_array - In evaluate_array(): 
returned_array=['T', 'F', 'T', 'T'], 
final_variable_combined=['(!Q)->(!P)'], 
matrix=[['T', 'T', 'T', 'F', 'T'], ['T', 'F', 'F', 'T', 'F'], ['F', 'T', 'T', 'F', 'T'], ['F', 'F', 'T', 'F', 'T']], 
variables=['P', 'Q', 'P->Q', '!Q', '!P']
2023-08-30 12:12:18,623 - DEBUG	- evaluate_array - Evaluation of array in evaluate_array() is done.
2023-08-30 12:12:18,623 - DEBUG	- add_array_to_matrix - Calling add_array_to_matrix([['T', 'T', 'T', 'F', 'T'], ['T', 'F', 'F', 'T', 'F'], ['F', 'T', 'T', 'F', 'T'], ['F', 'F', 'T', 'F', 'T']], ['T', 'F', 'T', 'T'], ['P', 'Q', 'P->Q', '!Q', '!P'], ['(!Q)->(!P)'])...
2023-08-30 12:12:18,623 - DEBUG	- add_array_to_matrix - variables=['P', 'Q', 'P->Q', '!Q', '!P', '(!Q)->(!P)']
2023-08-30 12:12:18,623 - DEBUG	- add_array_to_matrix - Added array to matrix.
2023-08-30 12:12:18,623 - DEBUG	- switch_case - Entering switch_case(<->, ['T', 'F', 'T', 'T'], ['T', 'F', 'T', 'T'])...
2023-08-30 12:12:18,623 - DEBUG	- bicond - In bicond. case...
2023-08-30 12:12:18,623 - DEBUG	- biconditional - Calling biconditional(['T', 'F', 'T', 'T'], ['T', 'F', 'T', 'T'])...
2023-08-30 12:12:18,623 - DEBUG	- biconditional - new_row_values=['T', 'T', 'T', 'T']
2023-08-30 12:12:18,623 - DEBUG	- biconditional - Returning with new row values.
2023-08-30 12:12:18,623 - DEBUG	- set_new_array_elem - Calling set_new_array_elem([['P->Q'], '<->', ['(!Q)->(!P)']])...
2023-08-30 12:12:18,624 - DEBUG	- set_new_array_elem - new_array=['(P->Q)<->((!Q)->(!P))']
2023-08-30 12:12:18,624 - DEBUG	- set_new_array_elem - Finished setting new array element.
2023-08-30 12:12:18,624 - DEBUG	- evaluate_array - In evaluate_array(): 
returned_array=['T', 'T', 'T', 'T'], 
final_variable_combined=['(P->Q)<->((!Q)->(!P))'], 
matrix=[['T', 'T', 'T', 'F', 'T', 'T', 'T'], ['T', 'F', 'F', 'T', 'F', 'F', 'T'], ['F', 'T', 'T', 'F', 'T', 'T', 'T'], ['F', 'F', 'T', 'F', 'T', 'T', 'T']], 
variables=['P', 'Q', 'P->Q', '!Q', '!P', '(!Q)->(!P)']
2023-08-30 12:12:18,624 - DEBUG	- evaluate_array - Evaluation of array in evaluate_array() is done.
2023-08-30 12:12:18,624 - DEBUG	- evaluate_array_as_tree - returned_array=['T', 'T', 'T', 'T'], returned_matrix=[['T', 'T', 'T', 'F', 'T', 'T', 'T'], ['T', 'F', 'F', 'T', 'F', 'F', 'T'], ['F', 'T', 'T', 'F', 'T', 'T', 'T'], ['F', 'F', 'T', 'F', 'T', 'T', 'T']], all_variables=['P', 'Q', 'P->Q', '!Q', '!P', '(!Q)->(!P)', '(P->Q)<->((!Q)->(!P))']
2023-08-30 12:12:18,624 - DEBUG	- evaluate_array_as_tree - Finished evaluating array.
2023-08-30 12:12:18,624 - DEBUG	- simulate_main - In simulate_main(): 
final_value_array=['T', 'T', 'T', 'T'], 
returned_matrix=[['T', 'T', 'T', 'F', 'T', 'T', 'T'], ['T', 'F', 'F', 'T', 'F', 'F', 'T'], ['F', 'T', 'T', 'F', 'T', 'T', 'T'], ['F', 'F', 'T', 'F', 'T', 'T', 'T']], 
all_variables=['P', 'Q', 'P->Q', '!Q', '!P', '(!Q)->(!P)', '(P->Q)<->((!Q)->(!P))']
2023-08-30 12:12:18,624 - DEBUG	- print_details - Printing details...
2023-08-30 12:12:18,624 - INFO	- print_details - ************************** EVALUATE **************************
2023-08-30 12:12:18,624 - INFO	- print_details - -> Statement: 	((P -> Q) <-> ((!Q) -> (!P)))
2023-08-30 12:12:18,624 - INFO	- print_details - -> Final Calculated Array: 	['T', 'T', 'T', 'T']
2023-08-30 12:12:18,624 - INFO	- print_details - -> All Variables: 	['P', 'Q', 'P->Q', '!Q', '!P', '(!Q)->(!P)', '(P->Q)<->((!Q)->(!P))']
2023-08-30 12:12:18,624 - INFO	- print_details - -> Final Matrix: 	[['T', 'T', 'T', 'F', 'T', 'T', 'T'], ['T', 'F', 'F', 'T', 'F', 'F', 'T'], ['F', 'T', 'T', 'F', 'T', 'T', 'T'], ['F', 'F', 'T', 'F', 'T', 'T', 'T']]
2023-08-30 12:12:18,624 - INFO	- print_details - ************************** EVALUATE **************************
2023-08-30 12:12:18,624 - INFO	- simulate_main - Finished evaluating statement.
2023-08-30 12:12:18,624 - DEBUG	- display_matrix - Displaying matrix to console...
2023-08-30 12:12:18,624 - DEBUG	- get_number_of_spaces - Calling get_number_of_spaces(2, 4, ['P', 'Q', 'P->Q', '!Q', '!P', '(!Q)->(!P)', '(P->Q)<->((!Q)->(!P))'])...
2023-08-30 12:12:18,624 - DEBUG	- get_number_of_spaces - total_space=64
2023-08-30 12:12:18,624 - DEBUG	- get_number_of_spaces - Finished calculating the total space.
2023-08-30 12:12:18,625 - DEBUG	- simulate_main - Returning from simulate_main()...
2023-08-30 12:12:18,625 - INFO	- <module> - Exiting Engine...
