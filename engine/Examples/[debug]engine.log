2023-08-28 19:02:15,226 - INFO	- <module> - Starting Engine...
2023-08-28 19:02:15,226 - DEBUG	- simulate_main - Calling simulate_main()...
2023-08-28 19:02:15,226 - INFO	- simulate_main - Statement:	(T v (P ^ Q))
2023-08-28 19:02:15,226 - INFO	- simulate_main - Before proceeding, doing checks for unequal brackets and illegal characters.
2023-08-28 19:02:15,226 - DEBUG	- check_left_and_right_brackets - Calling check_left_and_right_brackets((T v (P ^ Q)))...
2023-08-28 19:02:15,227 - INFO	- check_left_and_right_brackets - PASS: The number of left and right brackets are equal.
2023-08-28 19:02:15,227 - DEBUG	- check_for_illegal_characters - Calling check_for_illegal_characters((T v (P ^ Q)))
2023-08-28 19:02:15,227 - DEBUG	- check_for_illegal_characters - ******************** starting input validation *******************
2023-08-28 19:02:15,227 - DEBUG	- validate_input - Calling validate_input(T)...
2023-08-28 19:02:15,227 - DEBUG	- validate_input - Checked against a regex. result(is it valid?)=True.
2023-08-28 19:02:15,227 - DEBUG	- validate_input - Calling validate_input(v)...
2023-08-28 19:02:15,227 - DEBUG	- validate_input - Checked against a regex. result(is it valid?)=True.
2023-08-28 19:02:15,227 - DEBUG	- validate_input - Calling validate_input(P)...
2023-08-28 19:02:15,227 - DEBUG	- validate_input - Checked against a regex. result(is it valid?)=True.
2023-08-28 19:02:15,227 - DEBUG	- validate_input - Calling validate_input(^)...
2023-08-28 19:02:15,227 - DEBUG	- validate_input - Checked against a regex. result(is it valid?)=True.
2023-08-28 19:02:15,228 - DEBUG	- validate_input - Calling validate_input(Q)...
2023-08-28 19:02:15,228 - DEBUG	- validate_input - Checked against a regex. result(is it valid?)=True.
2023-08-28 19:02:15,228 - DEBUG	- check_for_illegal_characters - ******************** finished input validation *******************
2023-08-28 19:02:15,228 - INFO	- check_for_illegal_characters - PASS: There were no illegal characters found.
2023-08-28 19:02:15,228 - INFO	- simulate_main - All checks are valid, proceeding with extracting information from statement.
2023-08-28 19:02:15,228 - INFO	- user_input - Processing statement...
2023-08-28 19:02:15,228 - DEBUG	- user_input - statement=(T v (P ^ Q))
2023-08-28 19:02:15,228 - INFO	- analyze_statement - Starting to analyze statement...
2023-08-28 19:02:15,228 - DEBUG	- analyze_statement - All whitespaces need to be removed, proceeding.
2023-08-28 19:02:15,228 - DEBUG	- clean_whitespaces - Calling clean_whitespaces((T v (P ^ Q)))...
2023-08-28 19:02:15,228 - DEBUG	- clean_whitespaces - Finished removing whitespaces: statement=(Tv(P^Q))
2023-08-28 19:02:15,228 - DEBUG	- analyze_statement - Finished removing any whitespaces found in statement. Proceeding with finding variables.
2023-08-28 19:02:15,228 - INFO	- find_variables - Finding variables in statement...
2023-08-28 19:02:15,228 - DEBUG	- find_variables - statement=(Tv(P^Q))
2023-08-28 19:02:15,228 - DEBUG	- find_variables - variables_array=['T', 'P', 'Q']
2023-08-28 19:02:15,228 - INFO	- find_variables - Found all variables in statement.
2023-08-28 19:02:15,228 - INFO	- find_variables - *** Variables:	['T', 'P', 'Q'] ***
2023-08-28 19:02:15,228 - DEBUG	- analyze_statement - variables_arr=['T', 'P', 'Q']
2023-08-28 19:02:15,228 - INFO	- analyze_statement - The statement is converted to an array and any conditionals are sanitized.
2023-08-28 19:02:15,228 - DEBUG	- create_array_of_elements - Creating an array from a string...
2023-08-28 19:02:15,228 - DEBUG	- create_array_of_elements - Calling create_array_of_elements((Tv(P^Q)))
2023-08-28 19:02:15,228 - DEBUG	- create_array_of_elements - array_of_elements=['(', 'T', 'v', '(', 'P', '^', 'Q', ')', ')']
2023-08-28 19:02:15,228 - DEBUG	- create_array_of_elements - Finished creating array.
2023-08-28 19:02:15,228 - DEBUG	- create_conditionals - Creating one-piece conditionals from single elements.
2023-08-28 19:02:15,228 - DEBUG	- create_conditionals - Searching for a '-' in array_of_elements=['(', 'T', 'v', '(', 'P', '^', 'Q', ')', ')']
2023-08-28 19:02:15,228 - DEBUG	- create_conditionals - Search for conditionals finished and none were found, returning.
2023-08-28 19:02:15,228 - DEBUG	- analyze_statement - In analyze_statement(): 
len(variables_arr)=3, 
variables_arr=['T', 'P', 'Q'], 
array_of_elements=['(', 'T', 'v', '(', 'P', '^', 'Q', ')', ')']
2023-08-28 19:02:15,229 - DEBUG	- print_details - Printing details...
2023-08-28 19:02:15,229 - INFO	- print_details - ************************** ANALYSIS **************************
2023-08-28 19:02:15,229 - INFO	- print_details - -> Number of Variables: 	3
2023-08-28 19:02:15,229 - INFO	- print_details - -> Variables: 	['T', 'P', 'Q']
2023-08-28 19:02:15,229 - INFO	- print_details - -> Array of Elements: 	['(', 'T', 'v', '(', 'P', '^', 'Q', ')', ')']
2023-08-28 19:02:15,229 - INFO	- print_details - ************************** ANALYSIS **************************
2023-08-28 19:02:15,229 - INFO	- analyze_statement - Analyzing concluded.
2023-08-28 19:02:15,229 - INFO	- parse_array - Starting to parse array...
2023-08-28 19:02:15,229 - DEBUG	- remove_brackets_around_variables - Removing brackets around standalone variables...
2023-08-28 19:02:15,229 - DEBUG	- remove_brackets_around_variables - arr=['(', 'T', 'v', '(', 'P', '^', 'Q', ')', ')']
2023-08-28 19:02:15,230 - DEBUG	- remove_brackets_around_variables - Finished removing all brackets around variables.
2023-08-28 19:02:15,230 - DEBUG	- parse_array - In parse_array(): elements_second=['(', 'T', 'v', '(', 'P', '^', 'Q', ')', ')']
2023-08-28 19:02:15,230 - DEBUG	- add_brackets_around_unary_connectives - Adding brackets around unary connectives...
2023-08-28 19:02:15,230 - DEBUG	- add_brackets_around_unary_connectives - arr=['(', 'T', 'v', '(', 'P', '^', 'Q', ')', ')']
2023-08-28 19:02:15,230 - DEBUG	- add_brackets_around_unary_connectives - Finished adding brackets around all unary connectives.
2023-08-28 19:02:15,230 - DEBUG	- parse_array - In parse_array(): elements_second=['(', 'T', 'v', '(', 'P', '^', 'Q', ')', ')']
2023-08-28 19:02:15,230 - INFO	- parse_array - Final checks are ran before parsing concludes.
2023-08-28 19:02:15,230 - DEBUG	- check_left_and_right_brackets - Calling check_left_and_right_brackets(['(', 'T', 'v', '(', 'P', '^', 'Q', ')', ')'])...
2023-08-28 19:02:15,230 - INFO	- check_left_and_right_brackets - PASS: The number of left and right brackets are equal.
2023-08-28 19:02:15,230 - DEBUG	- parse - Calling parse(['(', 'T', 'v', '(', 'P', '^', 'Q', ')', ')'])...
2023-08-28 19:02:15,230 - DEBUG	- remove_outer_brackets - Calling remove_outer_brackets(['(', 'T', 'v', '(', 'P', '^', 'Q', ')', ')'])...
2023-08-28 19:02:15,230 - DEBUG	- remove_outer_brackets - array=['T', 'v', '(', 'P', '^', 'Q', ')']
2023-08-28 19:02:15,230 - DEBUG	- remove_outer_brackets - Finished removing outer brackets.
2023-08-28 19:02:15,230 - DEBUG	- parse - In parse(): arr=['T', 'v', '(', 'P', '^', 'Q', ')']
2023-08-28 19:02:15,230 - DEBUG	- find_connective - Calling find_connectives(['T', 'v', '(', 'P', '^', 'Q', ')'])...
2023-08-28 19:02:15,230 - DEBUG	- find_connective - In find_connective(): elem=v, i=1
2023-08-28 19:02:15,230 - DEBUG	- find_connective - Found connective.
2023-08-28 19:02:15,230 - DEBUG	- parse - Calling parse(['(', 'P', '^', 'Q', ')'])...
2023-08-28 19:02:15,230 - DEBUG	- remove_outer_brackets - Calling remove_outer_brackets(['(', 'P', '^', 'Q', ')'])...
2023-08-28 19:02:15,230 - DEBUG	- remove_outer_brackets - array=['P', '^', 'Q']
2023-08-28 19:02:15,231 - DEBUG	- remove_outer_brackets - Finished removing outer brackets.
2023-08-28 19:02:15,231 - DEBUG	- parse - In parse(): arr=['P', '^', 'Q']
2023-08-28 19:02:15,231 - DEBUG	- find_connective - Calling find_connectives(['P', '^', 'Q'])...
2023-08-28 19:02:15,231 - DEBUG	- find_connective - In find_connective(): elem=^, i=1
2023-08-28 19:02:15,231 - DEBUG	- find_connective - Found connective.
2023-08-28 19:02:15,231 - DEBUG	- parse - temp_array=[['P'], '^', ['Q']]
2023-08-28 19:02:15,231 - DEBUG	- parse - Returning with parsed list for binary connectives.
2023-08-28 19:02:15,231 - DEBUG	- parse - temp_array=[['T'], 'v', [['P'], '^', ['Q']]]
2023-08-28 19:02:15,231 - DEBUG	- parse - Returning with parsed list for binary connectives.
2023-08-28 19:02:15,231 - DEBUG	- parse_array - tree_structured_array=[['T'], 'v', [['P'], '^', ['Q']]]
2023-08-28 19:02:15,231 - DEBUG	- print_details - Printing details...
2023-08-28 19:02:15,231 - INFO	- print_details - *************************** PARSE ***************************
2023-08-28 19:02:15,231 - INFO	- print_details - -> Parsed Array: 	[['T'], 'v', [['P'], '^', ['Q']]]
2023-08-28 19:02:15,231 - INFO	- print_details - *************************** PARSE ***************************
2023-08-28 19:02:15,231 - INFO	- parse_array - Finished parsing array.
2023-08-28 19:02:15,231 - DEBUG	- user_input - In user_input(): 
number_of_variables=3, 
variables_as_array=['T', 'P', 'Q'], 
statement=(T v (P ^ Q)), 
new_elements=[['T'], 'v', [['P'], '^', ['Q']]].
2023-08-28 19:02:15,231 - INFO	- user_input - Gathered all information needed including variables and parsed array.
2023-08-28 19:02:15,231 - DEBUG	- simulate_main - In simulate_main(): 
number_of_variables=3, 
variables_as_array=['T', 'P', 'Q'], 
provided_statement=(T v (P ^ Q)), 
elements_in_tree=[['T'], 'v', [['P'], '^', ['Q']]]
2023-08-28 19:02:15,231 - DEBUG	- print_details - Printing details...
2023-08-28 19:02:15,232 - INFO	- print_details - ************************** SUMMARY **************************
2023-08-28 19:02:15,232 - INFO	- print_details - -> number_of_variables: 	3
2023-08-28 19:02:15,232 - INFO	- print_details - -> variables_as_array: 	['T', 'P', 'Q']
2023-08-28 19:02:15,232 - INFO	- print_details - -> provided_statement: 	(T v (P ^ Q))
2023-08-28 19:02:15,232 - INFO	- print_details - -> elements_in_tree: 	[['T'], 'v', [['P'], '^', ['Q']]]
2023-08-28 19:02:15,232 - INFO	- print_details - ************************** SUMMARY **************************
2023-08-28 19:02:15,232 - INFO	- evaluate_array_as_tree - Starting evaluation of array of elements...
2023-08-28 19:02:15,232 - DEBUG	- create_matrix - Creating initial matrix...
2023-08-28 19:02:15,232 - DEBUG	- recursive_table - Creating table entries recursively...
2023-08-28 19:02:15,232 - DEBUG	- recursive_table - n=3
2023-08-28 19:02:15,232 - DEBUG	- recursive_table - Creating table entries recursively...
2023-08-28 19:02:15,232 - DEBUG	- recursive_table - n=2
2023-08-28 19:02:15,232 - DEBUG	- recursive_table - Creating table entries recursively...
2023-08-28 19:02:15,232 - DEBUG	- recursive_table - n=1
2023-08-28 19:02:15,232 - DEBUG	- recursive_table - array_table=['T', 'F']
2023-08-28 19:02:15,232 - DEBUG	- recursive_table - Finished creating array of table entries.
2023-08-28 19:02:15,232 - DEBUG	- recursive_table - array_table=['TT', 'TF', 'FT', 'FF']
2023-08-28 19:02:15,232 - DEBUG	- recursive_table - Finished creating array of table entries.
2023-08-28 19:02:15,232 - DEBUG	- recursive_table - array_table=['TTT', 'TTF', 'TFT', 'TFF', 'FTT', 'FTF', 'FFT', 'FFF']
2023-08-28 19:02:15,232 - DEBUG	- recursive_table - Finished creating array of table entries.
2023-08-28 19:02:15,233 - DEBUG	- create_matrix - In create_matrix(): new_matrix=[['T', 'T', 'T'], ['T', 'T', 'F'], ['T', 'F', 'T'], ['T', 'F', 'F'], ['F', 'T', 'T'], ['F', 'T', 'F'], ['F', 'F', 'T'], ['F', 'F', 'F']]
2023-08-28 19:02:15,233 - INFO	- create_matrix - Finished creating the initial 'truth' matrix.
2023-08-28 19:02:15,233 - INFO	- create_matrix - *** Initial Matrix:	[['T', 'T', 'T'], ['T', 'T', 'F'], ['T', 'F', 'T'], ['T', 'F', 'F'], ['F', 'T', 'T'], ['F', 'T', 'F'], ['F', 'F', 'T'], ['F', 'F', 'F']] ***
2023-08-28 19:02:15,233 - DEBUG	- evaluate_array_as_tree - In evaluate_array_as_tree(): 
elements_in_tree=[['T'], 'v', [['P'], '^', ['Q']]], 
counter=0, 
matrix=[['T', 'T', 'T'], ['T', 'T', 'F'], ['T', 'F', 'T'], ['T', 'F', 'F'], ['F', 'T', 'T'], ['F', 'T', 'F'], ['F', 'F', 'T'], ['F', 'F', 'F']], 
variables_as_array=['T', 'P', 'Q']
2023-08-28 19:02:15,233 - DEBUG	- evaluate_array - Calling evaluate_array([['T'], 'v', [['P'], '^', ['Q']]], 0, [['T', 'T', 'T'], ['T', 'T', 'F'], ['T', 'F', 'T'], ['T', 'F', 'F'], ['F', 'T', 'T'], ['F', 'T', 'F'], ['F', 'F', 'T'], ['F', 'F', 'F']], ['T', 'P', 'Q'])...
2023-08-28 19:02:15,233 - DEBUG	- evaluate_array - Calling evaluate_array([['P'], '^', ['Q']], 1, [['T', 'T', 'T'], ['T', 'T', 'F'], ['T', 'F', 'T'], ['T', 'F', 'F'], ['F', 'T', 'T'], ['F', 'T', 'F'], ['F', 'F', 'T'], ['F', 'F', 'F']], ['T', 'P', 'Q'])...
2023-08-28 19:02:15,233 - DEBUG	- switch_case - Entering switch_case(^, ['T', 'T', 'F', 'F', 'T', 'T', 'F', 'F'], ['T', 'F', 'T', 'F', 'T', 'F', 'T', 'F'])...
2023-08-28 19:02:15,233 - DEBUG	- conj - In conj. case...
2023-08-28 19:02:15,233 - DEBUG	- conjunction - Calling conjunction(['T', 'T', 'F', 'F', 'T', 'T', 'F', 'F'], ['T', 'F', 'T', 'F', 'T', 'F', 'T', 'F'])...
2023-08-28 19:02:15,233 - DEBUG	- conjunction - new_row_values=['T', 'F', 'F', 'F', 'T', 'F', 'F', 'F']
2023-08-28 19:02:15,233 - DEBUG	- conjunction - Returning with new row values.
2023-08-28 19:02:15,233 - DEBUG	- set_new_array_elem - Calling set_new_array_elem([['P'], '^', ['Q']])...
2023-08-28 19:02:15,233 - DEBUG	- set_new_array_elem - new_array=['P^Q']
2023-08-28 19:02:15,233 - DEBUG	- set_new_array_elem - Finished setting new array element.
2023-08-28 19:02:15,233 - DEBUG	- evaluate_array - In evaluate_array(): 
returned_array=['T', 'F', 'F', 'F', 'T', 'F', 'F', 'F'], 
final_variable_combined=['P^Q'], 
matrix=[['T', 'T', 'T'], ['T', 'T', 'F'], ['T', 'F', 'T'], ['T', 'F', 'F'], ['F', 'T', 'T'], ['F', 'T', 'F'], ['F', 'F', 'T'], ['F', 'F', 'F']], 
variables=['T', 'P', 'Q']
2023-08-28 19:02:15,233 - DEBUG	- evaluate_array - Evaluation of array in evaluate_array() is done.
2023-08-28 19:02:15,233 - DEBUG	- add_array_to_matrix - Calling add_array_to_matrix([['T', 'T', 'T'], ['T', 'T', 'F'], ['T', 'F', 'T'], ['T', 'F', 'F'], ['F', 'T', 'T'], ['F', 'T', 'F'], ['F', 'F', 'T'], ['F', 'F', 'F']], ['T', 'F', 'F', 'F', 'T', 'F', 'F', 'F'], ['T', 'P', 'Q'], ['P^Q'])...
2023-08-28 19:02:15,233 - DEBUG	- add_array_to_matrix - variables=['T', 'P', 'Q', 'P^Q']
2023-08-28 19:02:15,234 - DEBUG	- add_array_to_matrix - Added array to matrix.
2023-08-28 19:02:15,234 - DEBUG	- switch_case - Entering switch_case(v, ['T', 'T', 'T', 'T', 'F', 'F', 'F', 'F'], ['T', 'F', 'F', 'F', 'T', 'F', 'F', 'F'])...
2023-08-28 19:02:15,234 - DEBUG	- disj - In disj. case...
2023-08-28 19:02:15,234 - DEBUG	- disjunction - Calling disjunction(['T', 'T', 'T', 'T', 'F', 'F', 'F', 'F'], ['T', 'F', 'F', 'F', 'T', 'F', 'F', 'F'])...
2023-08-28 19:02:15,234 - DEBUG	- disjunction - new_row_values=['T', 'T', 'T', 'T', 'T', 'F', 'F', 'F']
2023-08-28 19:02:15,234 - DEBUG	- disjunction - Returning with new row values.
2023-08-28 19:02:15,234 - DEBUG	- set_new_array_elem - Calling set_new_array_elem([['T'], 'v', ['P^Q']])...
2023-08-28 19:02:15,234 - DEBUG	- set_new_array_elem - new_array=['Tv(P^Q)']
2023-08-28 19:02:15,234 - DEBUG	- set_new_array_elem - Finished setting new array element.
2023-08-28 19:02:15,234 - DEBUG	- evaluate_array - In evaluate_array(): 
returned_array=['T', 'T', 'T', 'T', 'T', 'F', 'F', 'F'], 
final_variable_combined=['Tv(P^Q)'], 
matrix=[['T', 'T', 'T', 'T', 'T'], ['T', 'T', 'F', 'F', 'T'], ['T', 'F', 'T', 'F', 'T'], ['T', 'F', 'F', 'F', 'T'], ['F', 'T', 'T', 'T', 'T'], ['F', 'T', 'F', 'F', 'F'], ['F', 'F', 'T', 'F', 'F'], ['F', 'F', 'F', 'F', 'F']], 
variables=['T', 'P', 'Q', 'P^Q']
2023-08-28 19:02:15,234 - DEBUG	- evaluate_array - Evaluation of array in evaluate_array() is done.
2023-08-28 19:02:15,234 - DEBUG	- evaluate_array_as_tree - returned_array=['T', 'T', 'T', 'T', 'T', 'F', 'F', 'F'], returned_matrix=[['T', 'T', 'T', 'T', 'T'], ['T', 'T', 'F', 'F', 'T'], ['T', 'F', 'T', 'F', 'T'], ['T', 'F', 'F', 'F', 'T'], ['F', 'T', 'T', 'T', 'T'], ['F', 'T', 'F', 'F', 'F'], ['F', 'F', 'T', 'F', 'F'], ['F', 'F', 'F', 'F', 'F']], all_variables=['T', 'P', 'Q', 'P^Q', 'Tv(P^Q)']
2023-08-28 19:02:15,234 - DEBUG	- evaluate_array_as_tree - Finished evaluating array.
2023-08-28 19:02:15,234 - DEBUG	- simulate_main - In simulate_main(): 
final_value_array=['T', 'T', 'T', 'T', 'T', 'F', 'F', 'F'], 
returned_matrix=[['T', 'T', 'T', 'T', 'T'], ['T', 'T', 'F', 'F', 'T'], ['T', 'F', 'T', 'F', 'T'], ['T', 'F', 'F', 'F', 'T'], ['F', 'T', 'T', 'T', 'T'], ['F', 'T', 'F', 'F', 'F'], ['F', 'F', 'T', 'F', 'F'], ['F', 'F', 'F', 'F', 'F']], 
all_variables=['T', 'P', 'Q', 'P^Q', 'Tv(P^Q)']
2023-08-28 19:02:15,234 - DEBUG	- print_details - Printing details...
2023-08-28 19:02:15,235 - INFO	- print_details - ************************** EVALUATE **************************
2023-08-28 19:02:15,235 - INFO	- print_details - -> Statement: 	(T v (P ^ Q))
2023-08-28 19:02:15,235 - INFO	- print_details - -> Final Calculated Array: 	['T', 'T', 'T', 'T', 'T', 'F', 'F', 'F']
2023-08-28 19:02:15,235 - INFO	- print_details - -> All Variables: 	['T', 'P', 'Q', 'P^Q', 'Tv(P^Q)']
2023-08-28 19:02:15,235 - INFO	- print_details - -> Final Matrix: 	[['T', 'T', 'T', 'T', 'T'], ['T', 'T', 'F', 'F', 'T'], ['T', 'F', 'T', 'F', 'T'], ['T', 'F', 'F', 'F', 'T'], ['F', 'T', 'T', 'T', 'T'], ['F', 'T', 'F', 'F', 'F'], ['F', 'F', 'T', 'F', 'F'], ['F', 'F', 'F', 'F', 'F']]
2023-08-28 19:02:15,235 - INFO	- print_details - ************************** EVALUATE **************************
2023-08-28 19:02:15,235 - INFO	- simulate_main - Finished evaluating statement.
2023-08-28 19:02:15,235 - DEBUG	- display_matrix - Displaying matrix to console...
2023-08-28 19:02:15,236 - DEBUG	- get_number_of_spaces - Calling get_number_of_spaces(3, 1, ['T', 'P', 'Q', 'P^Q', 'Tv(P^Q)'])...
2023-08-28 19:02:15,236 - DEBUG	- get_number_of_spaces - total_space=30
2023-08-28 19:02:15,236 - DEBUG	- get_number_of_spaces - Finished calculating the total space.
2023-08-28 19:02:15,236 - DEBUG	- simulate_main - Returning from simulate_main()...
2023-08-28 19:02:15,236 - INFO	- <module> - Exiting Engine...
