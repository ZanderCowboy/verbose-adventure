2023-08-25 13:33:24,957 - WARNING	- Starting engine...
2023-08-25 13:33:24,958 - DEBUG	- Calling simulate_main()...
2023-08-25 13:33:24,958 - DEBUG	- Processing statement=(T v (P ^ Q))
2023-08-25 13:33:24,958 - INFO	- Before proceeding, checks for unequal brackets and illegal characters are done.
2023-08-25 13:33:24,958 - DEBUG	- Calling check_left_and_right_brackets((T v (P ^ Q)))...
2023-08-25 13:33:24,958 - WARNING	- The number of left and right brackets are equal, returning.
2023-08-25 13:33:24,958 - DEBUG	- Calling check_for_illegal_characters((T v (P ^ Q)))
2023-08-25 13:33:24,958 - DEBUG	- ******************** starting input validation *******************
2023-08-25 13:33:24,958 - DEBUG	- Calling validate_input(T)...
2023-08-25 13:33:24,958 - DEBUG	- Checked against a regex. result(is it valid?)=True. Returning.
2023-08-25 13:33:24,958 - DEBUG	- Calling validate_input(v)...
2023-08-25 13:33:24,958 - DEBUG	- Checked against a regex. result(is it valid?)=True. Returning.
2023-08-25 13:33:24,958 - DEBUG	- Calling validate_input(P)...
2023-08-25 13:33:24,958 - DEBUG	- Checked against a regex. result(is it valid?)=True. Returning.
2023-08-25 13:33:24,959 - DEBUG	- Calling validate_input(^)...
2023-08-25 13:33:24,959 - DEBUG	- Checked against a regex. result(is it valid?)=True. Returning.
2023-08-25 13:33:24,959 - DEBUG	- Calling validate_input(Q)...
2023-08-25 13:33:24,959 - DEBUG	- Checked against a regex. result(is it valid?)=True. Returning.
2023-08-25 13:33:24,959 - DEBUG	- ******************** finished input validation *******************
2023-08-25 13:33:24,959 - WARNING	- There were no illegal characters found, returning.
2023-08-25 13:33:24,959 - WARNING	- All checks are valid, proceeding with extracting all needed information.
2023-08-25 13:33:24,959 - INFO	- Processing statement...
2023-08-25 13:33:24,959 - DEBUG	- statement=(T v (P ^ Q))
2023-08-25 13:33:24,960 - INFO	- Starting to analize statement...
2023-08-25 13:33:24,960 - DEBUG	- Calling clean_whitespaces((T v (P ^ Q)))...
2023-08-25 13:33:24,960 - DEBUG	- Returning without whitespaces: statement=(Tv(P^Q))
2023-08-25 13:33:24,960 - INFO	- Finding variables in statement...
2023-08-25 13:33:24,960 - INFO	- All whitespaces need to be removed, proceeding.
2023-08-25 13:33:24,960 - DEBUG	- Calling clean_whitespaces((Tv(P^Q)))...
2023-08-25 13:33:24,960 - DEBUG	- Returning without whitespaces: statement=(Tv(P^Q))
2023-08-25 13:33:24,960 - WARNING	- Removed any whitespaces found in statement. Proceeding with finding variables.
2023-08-25 13:33:24,960 - DEBUG	- statement=(Tv(P^Q))
2023-08-25 13:33:24,960 - DEBUG	- variables_array=['T', 'P', 'Q']
2023-08-25 13:33:24,960 - INFO	- Found all variables in statement. 
2023-08-25 13:33:24,960 - DEBUG	- variables_arr=['T', 'P', 'Q']
2023-08-25 13:33:24,960 - INFO	- Creating an array from a string...
2023-08-25 13:33:24,960 - DEBUG	- Calling create_array_of_elements((Tv(P^Q)))
2023-08-25 13:33:24,960 - DEBUG	- array_of_elements=['(', 'T', 'v', '(', 'P', '^', 'Q', ')', ')']
2023-08-25 13:33:24,960 - INFO	- Finished creating array.
2023-08-25 13:33:24,960 - INFO	- Creating one-piece conditionals from single elements.
2023-08-25 13:33:24,960 - DEBUG	- Searching for a '-' in array_of_elements=['(', 'T', 'v', '(', 'P', '^', 'Q', ')', ')']
2023-08-25 13:33:24,960 - INFO	- Search for conditionals finished and none were found, returning.
2023-08-25 13:33:24,961 - DEBUG	- len(variables_arr)=3, variables_arr=['T', 'P', 'Q'], array_of_elements=['(', 'T', 'v', '(', 'P', '^', 'Q', ')', ')']
2023-08-25 13:33:24,961 - INFO	- Analyzing concluded.
2023-08-25 13:33:24,961 - INFO	- Starting to parse array...
2023-08-25 13:33:24,961 - INFO	- Removing brackets around standalone variables...
2023-08-25 13:33:24,961 - DEBUG	- arr=['(', 'T', 'v', '(', 'P', '^', 'Q', ')', ')']
2023-08-25 13:33:24,961 - INFO	- Removed all brackets around variables.
2023-08-25 13:33:24,961 - DEBUG	- In parse_array(): elements_second=['(', 'T', 'v', '(', 'P', '^', 'Q', ')', ')']
2023-08-25 13:33:24,961 - INFO	- Adding brackets around unary connectives...
2023-08-25 13:33:24,961 - DEBUG	- arr=['(', 'T', 'v', '(', 'P', '^', 'Q', ')', ')']
2023-08-25 13:33:24,961 - INFO	- Finished adding brackets around all unary connectives.
2023-08-25 13:33:24,961 - DEBUG	- In parse_array(): elements_second=['(', 'T', 'v', '(', 'P', '^', 'Q', ')', ')']
2023-08-25 13:33:24,961 - DEBUG	- Calling check_left_and_right_brackets(['(', 'T', 'v', '(', 'P', '^', 'Q', ')', ')'])...
2023-08-25 13:33:24,961 - WARNING	- The number of left and right brackets are equal, returning.
2023-08-25 13:33:24,961 - DEBUG	- Calling parse(['(', 'T', 'v', '(', 'P', '^', 'Q', ')', ')'])...
2023-08-25 13:33:24,961 - DEBUG	- Calling remove_outer_brackets(['(', 'T', 'v', '(', 'P', '^', 'Q', ')', ')'])...
2023-08-25 13:33:24,961 - DEBUG	- array=['T', 'v', '(', 'P', '^', 'Q', ')']
2023-08-25 13:33:24,961 - DEBUG	- Finished removing outer brackets.
2023-08-25 13:33:24,961 - DEBUG	- Removed outer brackets: arr=['T', 'v', '(', 'P', '^', 'Q', ')']
2023-08-25 13:33:24,962 - DEBUG	- Calling find_connectives(['T', 'v', '(', 'P', '^', 'Q', ')'])...
2023-08-25 13:33:24,962 - DEBUG	- Calling parse(['(', 'P', '^', 'Q', ')'])...
2023-08-25 13:33:24,962 - DEBUG	- Calling remove_outer_brackets(['(', 'P', '^', 'Q', ')'])...
2023-08-25 13:33:24,962 - DEBUG	- array=['P', '^', 'Q']
2023-08-25 13:33:24,962 - DEBUG	- Finished removing outer brackets.
2023-08-25 13:33:24,962 - DEBUG	- Removed outer brackets: arr=['P', '^', 'Q']
2023-08-25 13:33:24,962 - DEBUG	- Calling find_connectives(['P', '^', 'Q'])...
2023-08-25 13:33:24,962 - DEBUG	- temp_array=[['P'], '^', ['Q']]
2023-08-25 13:33:24,962 - DEBUG	- Returning with parsed list for binary connectives.
2023-08-25 13:33:24,962 - DEBUG	- temp_array=[['T'], 'v', [['P'], '^', ['Q']]]
2023-08-25 13:33:24,962 - DEBUG	- Returning with parsed list for binary connectives.
2023-08-25 13:33:24,962 - DEBUG	- tree_structured_array=[['T'], 'v', [['P'], '^', ['Q']]]
2023-08-25 13:33:24,962 - INFO	- Finished parsing array.
2023-08-25 13:33:24,962 - DEBUG	- number_of_variables=3, 
variables_as_array=['T', 'P', 'Q'], 
statement=(T v (P ^ Q)), 
new_elements=[['T'], 'v', [['P'], '^', ['Q']]].
2023-08-25 13:33:24,962 - INFO	- Gathered all information needed.
2023-08-25 13:33:24,962 - DEBUG	- In simulate_main(): 
number_of_variables=3, 
variables_as_array=['T', 'P', 'Q'], 
provided_statement=(T v (P ^ Q)), 
elements_in_tree=[['T'], 'v', [['P'], '^', ['Q']]]
2023-08-25 13:33:24,962 - INFO	- Printing details...
2023-08-25 13:33:24,962 - INFO	- ***********************************************************
2023-08-25 13:33:24,962 - INFO	- Displaying returned values in simulate_main():
2023-08-25 13:33:24,962 - INFO	- number_of_variables:	3
2023-08-25 13:33:24,963 - INFO	- variables_as_array:	['T', 'P', 'Q']
2023-08-25 13:33:24,963 - INFO	- provided_statement:	(T v (P ^ Q))
2023-08-25 13:33:24,963 - INFO	- elements_in_tree:		[['T'], 'v', [['P'], '^', ['Q']]]
2023-08-25 13:33:24,963 - INFO	- ***********************************************************
2023-08-25 13:33:24,963 - INFO	- Evaluating array of elements...
2023-08-25 13:33:24,963 - INFO	- Creating initial matrix...
2023-08-25 13:33:24,963 - INFO	- Creating table entries recursively...
2023-08-25 13:33:24,963 - DEBUG	- n=3
2023-08-25 13:33:24,963 - INFO	- Creating table entries recursively...
2023-08-25 13:33:24,963 - DEBUG	- n=2
2023-08-25 13:33:24,963 - INFO	- Creating table entries recursively...
2023-08-25 13:33:24,963 - DEBUG	- n=1
2023-08-25 13:33:24,963 - DEBUG	- array_table=['T', 'F']
2023-08-25 13:33:24,963 - INFO	- Finished creating array of table entries.
2023-08-25 13:33:24,963 - DEBUG	- array_table=['TT', 'TF', 'FT', 'FF']
2023-08-25 13:33:24,963 - INFO	- Finished creating array of table entries.
2023-08-25 13:33:24,963 - DEBUG	- array_table=['TTT', 'TTF', 'TFT', 'TFF', 'FTT', 'FTF', 'FFT', 'FFF']
2023-08-25 13:33:24,963 - INFO	- Finished creating array of table entries.
2023-08-25 13:33:24,963 - DEBUG	- In create_matrix(): new_matrix=[['T', 'T', 'T'], ['T', 'T', 'F'], ['T', 'F', 'T'], ['T', 'F', 'F'], ['F', 'T', 'T'], ['F', 'T', 'F'], ['F', 'F', 'T'], ['F', 'F', 'F']]
2023-08-25 13:33:24,964 - INFO	- Finished creating the initial 'truth' matrix.
2023-08-25 13:33:24,964 - DEBUG	- In evaluate_statement_as_array(): 
elements_in_tree=[['T'], 'v', [['P'], '^', ['Q']]], 
counter=0, 
matrix=[['T', 'T', 'T'], ['T', 'T', 'F'], ['T', 'F', 'T'], ['T', 'F', 'F'], ['F', 'T', 'T'], ['F', 'T', 'F'], ['F', 'F', 'T'], ['F', 'F', 'F']], 
variables_as_array=['T', 'P', 'Q']
2023-08-25 13:33:24,964 - DEBUG	- Calling evaluate_array([['T'], 'v', [['P'], '^', ['Q']]], 0, [['T', 'T', 'T'], ['T', 'T', 'F'], ['T', 'F', 'T'], ['T', 'F', 'F'], ['F', 'T', 'T'], ['F', 'T', 'F'], ['F', 'F', 'T'], ['F', 'F', 'F']], ['T', 'P', 'Q'])...
2023-08-25 13:33:24,964 - DEBUG	- Calling evaluate_array([['P'], '^', ['Q']], 1, [['T', 'T', 'T'], ['T', 'T', 'F'], ['T', 'F', 'T'], ['T', 'F', 'F'], ['F', 'T', 'T'], ['F', 'T', 'F'], ['F', 'F', 'T'], ['F', 'F', 'F']], ['T', 'P', 'Q'])...
2023-08-25 13:33:24,964 - DEBUG	- Entering switch_case(^, ['T', 'T', 'F', 'F', 'T', 'T', 'F', 'F'], ['T', 'F', 'T', 'F', 'T', 'F', 'T', 'F'])...
2023-08-25 13:33:24,964 - DEBUG	- In conj. case...
2023-08-25 13:33:24,964 - DEBUG	- Calling conjunction(['T', 'T', 'F', 'F', 'T', 'T', 'F', 'F'], ['T', 'F', 'T', 'F', 'T', 'F', 'T', 'F'])...
2023-08-25 13:33:24,964 - DEBUG	- new_row_values=['T', 'F', 'F', 'F', 'T', 'F', 'F', 'F']
2023-08-25 13:33:24,964 - DEBUG	- Returning with new row values.
2023-08-25 13:33:24,964 - DEBUG	- Calling set_new_array_elem([['P'], '^', ['Q']])...
2023-08-25 13:33:24,964 - DEBUG	- new_array=['P^Q']
2023-08-25 13:33:24,964 - DEBUG	- Finished setting new array element.
2023-08-25 13:33:24,964 - DEBUG	- returned_array=['T', 'F', 'F', 'F', 'T', 'F', 'F', 'F'], final_variable_combined=['P^Q'], matrix=[['T', 'T', 'T'], ['T', 'T', 'F'], ['T', 'F', 'T'], ['T', 'F', 'F'], ['F', 'T', 'T'], ['F', 'T', 'F'], ['F', 'F', 'T'], ['F', 'F', 'F']], variables=['T', 'P', 'Q']
2023-08-25 13:33:24,964 - DEBUG	- Evaluation of array in evaluate_array() is done.
2023-08-25 13:33:24,964 - DEBUG	- Calling add_array_to_matrix([['T', 'T', 'T'], ['T', 'T', 'F'], ['T', 'F', 'T'], ['T', 'F', 'F'], ['F', 'T', 'T'], ['F', 'T', 'F'], ['F', 'F', 'T'], ['F', 'F', 'F']], ['T', 'F', 'F', 'F', 'T', 'F', 'F', 'F'], ['T', 'P', 'Q'], ['P^Q'])...
2023-08-25 13:33:24,964 - DEBUG	- variables=['T', 'P', 'Q', 'P^Q']
2023-08-25 13:33:24,965 - DEBUG	- Added array to matrix.
2023-08-25 13:33:24,965 - DEBUG	- Entering switch_case(v, ['T', 'T', 'T', 'T', 'F', 'F', 'F', 'F'], ['T', 'F', 'F', 'F', 'T', 'F', 'F', 'F'])...
2023-08-25 13:33:24,965 - DEBUG	- In disj. case...
2023-08-25 13:33:24,965 - DEBUG	- Calling disjunction(['T', 'T', 'T', 'T', 'F', 'F', 'F', 'F'], ['T', 'F', 'F', 'F', 'T', 'F', 'F', 'F'])...
2023-08-25 13:33:24,965 - DEBUG	- new_row_values=['T', 'T', 'T', 'T', 'T', 'F', 'F', 'F']
2023-08-25 13:33:24,965 - DEBUG	- Returning with new row values.
2023-08-25 13:33:24,965 - DEBUG	- Calling set_new_array_elem([['T'], 'v', ['P^Q']])...
2023-08-25 13:33:24,965 - DEBUG	- new_array=['Tv(P^Q)']
2023-08-25 13:33:24,965 - DEBUG	- Finished setting new array element.
2023-08-25 13:33:24,965 - DEBUG	- returned_array=['T', 'T', 'T', 'T', 'T', 'F', 'F', 'F'], final_variable_combined=['Tv(P^Q)'], matrix=[['T', 'T', 'T', 'T', 'T'], ['T', 'T', 'F', 'F', 'T'], ['T', 'F', 'T', 'F', 'T'], ['T', 'F', 'F', 'F', 'T'], ['F', 'T', 'T', 'T', 'T'], ['F', 'T', 'F', 'F', 'F'], ['F', 'F', 'T', 'F', 'F'], ['F', 'F', 'F', 'F', 'F']], variables=['T', 'P', 'Q', 'P^Q']
2023-08-25 13:33:24,965 - DEBUG	- Evaluation of array in evaluate_array() is done.
2023-08-25 13:33:24,965 - DEBUG	- returned_array=['T', 'T', 'T', 'T', 'T', 'F', 'F', 'F'], returned_matrix=[['T', 'T', 'T', 'T', 'T'], ['T', 'T', 'F', 'F', 'T'], ['T', 'F', 'T', 'F', 'T'], ['T', 'F', 'F', 'F', 'T'], ['F', 'T', 'T', 'T', 'T'], ['F', 'T', 'F', 'F', 'F'], ['F', 'F', 'T', 'F', 'F'], ['F', 'F', 'F', 'F', 'F']], all_variables=['T', 'P', 'Q', 'P^Q', 'Tv(P^Q)']
2023-08-25 13:33:24,966 - INFO	- Finished evaluating array.
2023-08-25 13:33:24,966 - WARNING	- Finished evaluating statement.
2023-08-25 13:33:24,966 - DEBUG	- final_value_array=['T', 'T', 'T', 'T', 'T', 'F', 'F', 'F'], returned_matrix=[['T', 'T', 'T', 'T', 'T'], ['T', 'T', 'F', 'F', 'T'], ['T', 'F', 'T', 'F', 'T'], ['T', 'F', 'F', 'F', 'T'], ['F', 'T', 'T', 'T', 'T'], ['F', 'T', 'F', 'F', 'F'], ['F', 'F', 'T', 'F', 'F'], ['F', 'F', 'F', 'F', 'F']], all_variables=['T', 'P', 'Q', 'P^Q', 'Tv(P^Q)']
2023-08-25 13:33:24,966 - INFO	- Displaying matrix to console...
2023-08-25 13:33:24,966 - DEBUG	- Calling get_number_of_spaces(3, 1, ['T', 'P', 'Q', 'P^Q', 'Tv(P^Q)'])...
2023-08-25 13:33:24,966 - DEBUG	- total_space=30
2023-08-25 13:33:24,966 - DEBUG	- Finished calculating the total space.
2023-08-25 13:33:24,966 - DEBUG	- Returning from simulate_main()...
2023-08-25 13:33:24,966 - WARNING	- Exiting engine...
